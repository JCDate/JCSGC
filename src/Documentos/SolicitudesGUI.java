package Documentos;

import Modelos.Iconos;
import Modelos.SolicitudesM;
import Modelos.Usuarios;
import Servicios.Conexion;
import Servicios.ControlDocumentacionServicio;
import Servicios.Utilidades;
import Servicios.imgTabla;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import swing.Button;

public class SolicitudesGUI extends javax.swing.JFrame {

    // Atributos
    private Usuarios usuario; // Usuario autenticado en la aplicación
    private Connection conexion; // Conexión a la Base de Datos
    private DefaultTableModel modeloTabla; // Definición de la estructura de la tabla
    private List<SolicitudesM> listaSolicitudes; // Lista de Solicitudes
    private ControlDocumentacionServicio cds; // Servicio para manejar el control de documentos

    // Columnas de la tabla
    private static final int COLUMNA_CODIGO = 0;
    private static final int COLUMNA_PROCESO = 1;
    private static final int COLUMNA_PROCEDIMIENTO = 2;
    private static final int COLUMNA_REV_ANTERIOR = 3;
    private static final int COLUMNA_REV_NUEVA = 4;
    private static final int COLUMNA_ENCARGADO = 5;
    private static final int COLUMNA_ACCION = 6;
    private static final int COLUMNA_TIPO_ARCHIVO = 7;
    private static final int COLUMNA_NOMBRE = 8;
    private static final int COLUMNA_ARCHIVO = 9;
    private static final int COLUMNA_BTN_ACEPTAR = 10;
    private static final int COLUMNA_BTN_RECHAZAR = 11;

    public SolicitudesGUI() {
        inicializarVentanaYComponentes();
    }

    public SolicitudesGUI(Usuarios usuario) {
        this.usuario = usuario;
        this.listaSolicitudes = new ArrayList<>();
        inicializarVentanaYComponentes();
    }

    @Override
    public Image getIconImage() { // Método para cambiar el icono en la barra del titulo
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("jc/img/jc.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblJCIcono = new javax.swing.JLabel();
        lblSolicitudesCambios = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSolicitudes = new javax.swing.JTable();
        btnCerrar = new swing.Button(new Color(255, 76, 76),new Color(255, 50, 50));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(251, 251, 251));
        jPanel1.setForeground(new java.awt.Color(242, 242, 242));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblJCIcono.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblJCIcono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/jcLogo.png"))); // NOI18N
        jPanel1.add(lblJCIcono, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblSolicitudesCambios.setFont(new java.awt.Font("Wide Latin", 1, 14)); // NOI18N
        lblSolicitudesCambios.setForeground(new java.awt.Color(10, 110, 255));
        lblSolicitudesCambios.setText("SOLICITUDES DE CAMBIO:");
        jPanel1.add(lblSolicitudesCambios, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, -1, -1));

        tblSolicitudes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CÓDIGO", "PROCESO", "PROCEDIMIENTO", "REV. ANTERIOR", "REV. NUEVA", "ENCARGADO", "ACCION", "TIPO DE ARCHIVO", "NOMBRE", "ARCHIVO", "APROBAR", "RECHAZAR"
            }
        ));
        tblSolicitudes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSolicitudesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSolicitudes);
        if (tblSolicitudes.getColumnModel().getColumnCount() > 0) {
            tblSolicitudes.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 1270, 330));

        btnCerrar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCerrar.setForeground(new java.awt.Color(255, 255, 255));
        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/cancelar.png"))); // NOI18N
        btnCerrar.setText("CERRAR");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, 130, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 540));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblSolicitudesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSolicitudesMouseClicked
        int columnaSeleccionada = tblSolicitudes.getColumnModel().getColumnIndexAtX(evt.getX());
        int filaSeleccionada = tblSolicitudes.rowAtPoint(evt.getPoint());

        if (Utilidades.esCeldaValida(tblSolicitudes, filaSeleccionada, columnaSeleccionada)) {
            String id = (String) tblSolicitudes.getValueAt(filaSeleccionada, 0);
            Object value = tblSolicitudes.getValueAt(filaSeleccionada, columnaSeleccionada);

            if (value instanceof JButton) {
                JButton boton = (JButton) value;
                manejarBoton(boton.getText(), id, filaSeleccionada, columnaSeleccionada);
            }
        }
    }//GEN-LAST:event_tblSolicitudesMouseClicked

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        cerrarVentana();
        cds.abrirControlDocumentosGUI(usuario);
    }//GEN-LAST:event_btnCerrarActionPerformed

    public void cerrarVentana() {
        SolicitudesGUI.this.dispose();
        Conexion.getInstance().desconectar(conexion);
    }

    private void inicializarVentanaYComponentes() {
        try {
            configurarVentana();
            this.conexion = Conexion.getInstance().conectar();
            this.cds = new ControlDocumentacionServicio();
            inicializarTabla();
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("Error al abrir SolicitudesGUI: ", ex);
            Logger.getLogger(SolicitudesGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void configurarVentana() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
    }

    private void inicializarTabla() {
        try {
            this.modeloTabla = construirModeloTabla();
            listaSolicitudes = cds.obtenerSolicitudes(conexion);
            tblSolicitudes.setModel(modeloTabla);
            tblSolicitudes.setRowHeight(40);
            mostrarDatosTabla();
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("Error al inicializar la tabla: ", ex);
            Logger.getLogger(FormatosGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private DefaultTableModel construirModeloTabla() {
        final String[] nombresColumnas = {"CÓDIGO", "PROCESO", "PROCEDIMIENTO", "REV. ANTERIOR", "REV. NUEVA", "ENCARGADO", "ACCIÓN", "TIPO DE ARCHIVO", "NOMBRE NUEVO", "ARCHIVO", "ACEPTAR", "DENEGAR"};

        modeloTabla = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        modeloTabla.setColumnIdentifiers(nombresColumnas);

        return modeloTabla;
    }

    public void mostrarDatosTabla() {
        limpiarTabla();
        llenarTabla();
        configurarRenderizacionTabla();
    }

    private void limpiarTabla() {
        modeloTabla.setRowCount(0);
    }

    private void llenarTabla() {
        if (listaSolicitudes != null && !listaSolicitudes.isEmpty()) {
            listaSolicitudes.forEach(solicitud -> {
                Object[] fila = crearFila(solicitud);
                modeloTabla.addRow(fila);
            });
        }
    }

    private Object[] crearFila(SolicitudesM solicitud) {
        Button btnAceptar = new Button();
        Button btnRechazar = new Button();
        btnAceptar.setIcon(Iconos.ICONO_ACEPTAR);
        btnRechazar.setIcon(Iconos.ICONO_RECHAZAR);
        Object fila[] = new Object[12];
        fila[COLUMNA_CODIGO] = solicitud.getCodigo();
        fila[COLUMNA_PROCESO] = solicitud.getProceso();
        fila[COLUMNA_PROCEDIMIENTO] = solicitud.getProcedimiento();
        fila[COLUMNA_REV_ANTERIOR] = solicitud.getRevAnterior();
        fila[COLUMNA_REV_NUEVA] = solicitud.getRevNueva();
        fila[COLUMNA_ENCARGADO] = solicitud.getEncargado();
        fila[COLUMNA_ACCION] = solicitud.getAccion();
        fila[COLUMNA_TIPO_ARCHIVO] = solicitud.getTipoArchivo();
        fila[COLUMNA_NOMBRE] = solicitud.getNombre();
        fila[COLUMNA_ARCHIVO] = cds.crearBoton(solicitud.getArchivo(), Iconos.ICONO_VER, "Vacío");
        fila[COLUMNA_BTN_ACEPTAR] = btnAceptar;
        fila[COLUMNA_BTN_RECHAZAR] = btnRechazar;
        return fila;
    }

    private void configurarRenderizacionTabla() {
        tblSolicitudes.setDefaultRenderer(Object.class, new imgTabla());
    }

    private void manejarBoton(String textoBoton, String id, int filaSeleccionada, int columnaSeleccionada) {
        switch (textoBoton) {
            case "Vacío":
                JOptionPane.showMessageDialog(null, "No hay archivo");
                break;
            default:
                manejarAccion(columnaSeleccionada, id, filaSeleccionada);
                break;
        }
    }

    private void manejarAccion(int columnaSeleccionada, String id, int filaSeleccionada) {
        switch (columnaSeleccionada) {
            case 9: {
                try {
                    cds.ejecutarArchivoSC(id);
                } catch (ClassNotFoundException | SQLException ex) {
                    Utilidades.manejarExcepcion("ERROR al ejecutar el archivo: ", ex);
                    Logger.getLogger(SolicitudesGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            break;
            case 10: {
                try {
                    aprobarSolicitud(filaSeleccionada);
                } catch (SQLException | ClassNotFoundException ex) {
                    Utilidades.manejarExcepcion("ERROR al aprobar la solicitud: ", ex);
                    Logger.getLogger(SolicitudesGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            break;
            case 11: {
                try {
                    eliminarSolicitud(id);
                } catch (SQLException ex) {
                    Utilidades.manejarExcepcion("ERROR al eliminar la solicitud: ", ex);
                    Logger.getLogger(SolicitudesGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            break;
        }
    }

    private void aprobarSolicitud(int filaSeleccionada) throws SQLException, ClassNotFoundException {
        int respuestaA = JOptionPane.showConfirmDialog(this,
                "LA ACTUALIZACIÓN DE DOCUMENTOS SERÁ IRREVERSIBLE, ¿ESTÁS DE ACUERDO?",
                "ALERTA", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);

        if (respuestaA == JOptionPane.YES_OPTION) {
            cds.aceptarSolicitud(listaSolicitudes.get(filaSeleccionada));
            JOptionPane.showMessageDialog(null, "LA SOLICITUD DE CAMBIO FUE APROBADA");
            cerrarVentana();
            cds.abrirSolicitudCambioGUI(usuario);
        }
    }

    private void eliminarSolicitud(String id) throws SQLException {
        int respuestaE = JOptionPane.showConfirmDialog(this,
                "LA INFORMACIÓN DE LA SOLICITUD DE CAMBIO SERÁ ELIMINADA, ¿ESTÁS DE ACUERDO?",
                "ALERTA", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);

        if (respuestaE == JOptionPane.YES_OPTION) {
            try {
                cds.eliminarSolicitud(id);
                cerrarVentana();
                JOptionPane.showMessageDialog(this, "DATOS ELIMINADOS CORRECTAMENTE");
                cds.abrirSolicitudCambioGUI(usuario);
            } catch (ClassNotFoundException ex) {
                Utilidades.manejarExcepcion("ERROR al eliminar el archivo: ", ex);
                Logger.getLogger(SolicitudesGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SolicitudesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SolicitudesGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCerrar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblJCIcono;
    private javax.swing.JLabel lblSolicitudesCambios;
    private javax.swing.JTable tblSolicitudes;
    // End of variables declaration//GEN-END:variables
}
