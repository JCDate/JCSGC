package Documentos;

import BotonesAccion.TableActionCellEditor;
import BotonesAccion.TableActionCellRender;
import BotonesAccion.TableActionEvent;
import Modelos.Iconos;
import Modelos.SolicitudesM;
import Modelos.Usuarios;
import Servicios.Conexion;
import Servicios.ControlDocumentacionServicio;
import Servicios.Utilidades;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import swing.Button;

public class SolicitudesGUI extends javax.swing.JFrame {

    // Atributos
    private Usuarios usuario; // Usuario autenticado en la aplicación
    private Connection conexion; // Conexión a la Base de Datos
    private DefaultTableModel modeloTabla; // Definición de la estructura de la tabla
    private ControlDocumentacionServicio cds; // Servicio para manejar el control de documentos
    private List<SolicitudesM> listaSolicitudes; // Lista de Solicitudes

    public SolicitudesGUI() {
        initComponents();
    }

    public SolicitudesGUI(Usuarios usuario) {
        this.usuario = usuario;
        this.listaSolicitudes = new ArrayList<>();
        inicializarVentanaYComponentes();
    }

    @Override
    public Image getIconImage() { // Método para cambiar el icono en la barra del titulo
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("jc/img/jc.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblJCIcono = new javax.swing.JLabel();
        lblSolicitudesCambios = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSolicitudes = new javax.swing.JTable();
        btnCerrar = new swing.Button(new Color(255, 76, 76),new Color(255, 50, 50));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(251, 251, 251));
        jPanel1.setForeground(new java.awt.Color(242, 242, 242));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblJCIcono.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblJCIcono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/jcLogo.png"))); // NOI18N
        jPanel1.add(lblJCIcono, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblSolicitudesCambios.setFont(new java.awt.Font("Wide Latin", 1, 14)); // NOI18N
        lblSolicitudesCambios.setForeground(new java.awt.Color(10, 110, 255));
        lblSolicitudesCambios.setText("SOLICITUDES DE CAMBIO:");
        jPanel1.add(lblSolicitudesCambios, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, -1, -1));

        tblSolicitudes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CÓDIGO", "PROCESO", "PROCEDIMIENTO", "REV. ANTERIOR", "REV. NUEVA", "ENCARGADO", "ACCION", "TIPO DE ARCHIVO", "NOMBRE", "ARCHIVO", "APROBAR", "RECHAZAR"
            }
        ));
        jScrollPane1.setViewportView(tblSolicitudes);
        if (tblSolicitudes.getColumnModel().getColumnCount() > 0) {
            tblSolicitudes.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 1270, 330));

        btnCerrar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCerrar.setForeground(new java.awt.Color(255, 255, 255));
        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/cancelar.png"))); // NOI18N
        btnCerrar.setText("CERRAR");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, 130, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 540));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        cerrarVentana();
        cds.abrirControlDocumentosGUI(usuario);
    }//GEN-LAST:event_btnCerrarActionPerformed

    public void cerrarVentana() {
        SolicitudesGUI.this.dispose();
        Conexion.getInstance().desconectar(conexion);
    }

    private void inicializarVentanaYComponentes() {
        try {
            configurarVentana();
            inicializarAtributos();
            inicializarTabla();
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("Error al abrir SolicitudesGUI: ", ex);
            Logger.getLogger(SolicitudesGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void configurarVentana() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
    }

    private void inicializarAtributos() throws SQLException {
        this.conexion = Conexion.getInstance().conectar();
        this.cds = new ControlDocumentacionServicio();
        this.modeloTabla = (DefaultTableModel) tblSolicitudes.getModel();
    }

    private void inicializarTabla() {
        try {
            listaSolicitudes = cds.obtenerSolicitudes(conexion);
            configurarAccionesTabla(false, false, true, false, true, true);
            mostrarDatosTabla();
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("Error al inicializar la tabla: ", ex);
            Logger.getLogger(FormatosGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void configurarAccionesTabla(boolean btnEditar, boolean btnEliminar, boolean btnVer, boolean btnRegistro, boolean btnAceptar, boolean btnRechazar) {
        TableActionEvent event = crearTableActionEvent();
        tblSolicitudes.getColumnModel().getColumn(9).setCellRenderer(new TableActionCellRender(btnEditar, btnEliminar, btnVer, btnRegistro, btnAceptar, btnRechazar));
        tblSolicitudes.getColumnModel().getColumn(9).setCellEditor(new TableActionCellEditor(event, btnEditar, btnEliminar, btnVer, btnRegistro, btnAceptar, btnRechazar));
    }

    private TableActionEvent crearTableActionEvent() {
        return new TableActionEvent() {
            @Override
            public void onEdit(int row) {
                // Nada ...
            }

            @Override
            public void onDelete(int row) {
                // Nada ...
            }

            @Override
            public void onView(int row) {
                cerrarVentana();
                cds.abrirDocumento(listaSolicitudes.get(row).getRutaArchivo());
            }

            @Override
            public void onOpenRecords(int row) {
                // Nada ...
            }

            @Override
            public void onAccept(int row) {
                try {
                    aprobarSolicitud(row);
                } catch (SQLException | ClassNotFoundException ex) {
                    Utilidades.manejarExcepcion("ERROR al aprobar la solicitud: ", ex);
                    Logger.getLogger(SolicitudesGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void onReject(int row) {
                try {
                    eliminarSolicitud(listaSolicitudes.get(row).getCodigo());
                } catch (SQLException ex) {
                    Utilidades.manejarExcepcion("Error al eliminar la solicitud", ex);
                    Logger.getLogger(SolicitudesGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
    }

    public void mostrarDatosTabla() {
        limpiarTabla();
        llenarTabla();
    }

    private void limpiarTabla() {
        modeloTabla.setRowCount(0);
    }

    private void llenarTabla() {
        if (listaSolicitudes != null && !listaSolicitudes.isEmpty()) {
            listaSolicitudes.forEach(solicitud -> {
                Object[] fila = crearFila(solicitud);
                modeloTabla.addRow(fila);
            });
        }
    }

    private Object[] crearFila(SolicitudesM solicitud) {
        Button btnAceptar = new Button();
        Button btnRechazar = new Button();
        btnAceptar.setIcon(Iconos.ICONO_ACEPTAR);
        btnRechazar.setIcon(Iconos.ICONO_RECHAZAR);
        Object fila[] = new Object[12];
        fila[0] = solicitud.getCodigo();
        fila[1] = solicitud.getProceso();
        fila[2] = solicitud.getProcedimiento();
        fila[3] = solicitud.getRevAnterior();
        fila[4] = solicitud.getRevNueva();
        fila[5] = solicitud.getEncargado();
        fila[6] = solicitud.getAccion();
        fila[7] = solicitud.getTipoArchivo();
        fila[8] = solicitud.getNombre();
        fila[9] = "OPERACIONES";
        return fila;
    }

    private void aprobarSolicitud(int filaSeleccionada) throws SQLException, ClassNotFoundException {
        int respuestaA = JOptionPane.showConfirmDialog(this,
                "LA ACTUALIZACIÓN DE DOCUMENTOS SERÁ IRREVERSIBLE, ¿ESTÁS DE ACUERDO?",
                "ALERTA", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);

        if (respuestaA == JOptionPane.YES_OPTION) {
            cds.aceptarSolicitud(conexion, listaSolicitudes.get(filaSeleccionada));
            JOptionPane.showMessageDialog(null, "LA SOLICITUD DE CAMBIO FUE APROBADA");
            cerrarVentana();
            cds.abrirSolicitudCambioGUI(usuario);
        }
    }

    private void eliminarSolicitud(String id) throws SQLException {
        int respuestaE = JOptionPane.showConfirmDialog(this,
                "LA INFORMACIÓN DE LA SOLICITUD DE CAMBIO SERÁ ELIMINADA, ¿ESTÁS DE ACUERDO?",
                "ALERTA", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);

        if (respuestaE == JOptionPane.YES_OPTION) {
            try {
                cds.eliminarSolicitud(conexion, id);
                cerrarVentana();
                JOptionPane.showMessageDialog(this, "DATOS ELIMINADOS CORRECTAMENTE");
                cds.abrirSolicitudCambioGUI(usuario);
            } catch (ClassNotFoundException ex) {
                Utilidades.manejarExcepcion("ERROR al eliminar el archivo: ", ex);
                Logger.getLogger(SolicitudesGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SolicitudesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SolicitudesGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCerrar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblJCIcono;
    private javax.swing.JLabel lblSolicitudesCambios;
    private javax.swing.JTable tblSolicitudes;
    // End of variables declaration//GEN-END:variables
}
