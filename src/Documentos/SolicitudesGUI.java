package Documentos;

import Modelos.Iconos;
import Modelos.ProcesosM;
import Modelos.SolicitudesM;
import Modelos.Usuarios;
import Servicios.Conexion;
import Servicios.ControlDocumentacionServicio;
import Servicios.imgTabla;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import swing.Button;

public class SolicitudesGUI extends javax.swing.JFrame {

    private Usuarios usr;
    private ProcesosM proceso;
    private Conexion conexion;
    private DefaultTableModel modeloTabla;
    private List<SolicitudesM> listSolicitudes = new ArrayList<>();
    private ControlDocumentacionServicio cds = new ControlDocumentacionServicio();

    public SolicitudesGUI() {
        initComponents();
    }

    public SolicitudesGUI(Usuarios usr) {
        try {
            this.usr = usr;
            inicializarVentanaYComponentes();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormatosGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("jc/img/jc.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblJCIcono = new javax.swing.JLabel();
        lblSolicitudesCambios = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSolicitudes = new javax.swing.JTable();
        btnCerrar = new swing.Button(new Color(255, 76, 76),new Color(255, 50, 50));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(251, 251, 251));
        jPanel1.setForeground(new java.awt.Color(242, 242, 242));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblJCIcono.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblJCIcono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/jcLogo.png"))); // NOI18N
        jPanel1.add(lblJCIcono, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        lblSolicitudesCambios.setFont(new java.awt.Font("Wide Latin", 1, 14)); // NOI18N
        lblSolicitudesCambios.setForeground(new java.awt.Color(10, 110, 255));
        lblSolicitudesCambios.setText("SOLICITUDES DE CAMBIO:");
        jPanel1.add(lblSolicitudesCambios, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, -1, -1));

        tblSolicitudes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CÓDIGO", "PROCESO", "PROCEDIMIENTO", "REV. ANTERIOR", "REV. NUEVA", "ENCARGADO", "ACCION", "TIPO DE ARCHIVO", "NOMBRE", "ARCHIVO", "APROBAR", "RECHAZAR"
            }
        ));
        tblSolicitudes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSolicitudesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSolicitudes);
        if (tblSolicitudes.getColumnModel().getColumnCount() > 0) {
            tblSolicitudes.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 1270, 330));

        btnCerrar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCerrar.setForeground(new java.awt.Color(255, 255, 255));
        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/cancelar.png"))); // NOI18N
        btnCerrar.setText("CERRAR");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, 130, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 540));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblSolicitudesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSolicitudesMouseClicked
        int column = tblSolicitudes.getColumnModel().getColumnIndexAtX(evt.getX());
        int row = tblSolicitudes.rowAtPoint(evt.getPoint());

        if (row < tblSolicitudes.getRowCount() && row >= 0 && column < tblSolicitudes.getColumnCount() && column >= 0) {// Si las coordenadas estan dentro de los limites de la tabla... 
            String id = (String) tblSolicitudes.getValueAt(row, 0); // Se guarda el valor de la celda (row,0) en la primera columna

            int posicion = -1; // Variable para almacenar la posición del elemento encontrado

            for (int i = 0; i < this.listSolicitudes.size(); i++) {
                SolicitudesM elemento = this.listSolicitudes.get(i);
                if (elemento.getCodigo().equals(id)) {
                    posicion = i;
                    break;
                }
            }

            Object value = tblSolicitudes.getValueAt(row, column); // Se obtiene el valor de la celda en la columna y fila especificados
            if (value instanceof JButton) { // Si el valor de la celda es un boton...
                JButton boton = (Button) value;
                String textoBoton = boton.getText(); // Se obtiene el texto del boton
                switch (textoBoton) { // Según el texto del boton...
                    case "Vacío":
                        JOptionPane.showMessageDialog(null, "No hay archivo");
                        break;
                    default:
                        try {
                            switch (column) {
                                case 9:
                                    cds.ejecutarArchivoSC(id);
                                    break;
                                case 10:
                                    int respuestaA = JOptionPane.showConfirmDialog(this, "LA ACTUALIZACIÓN DE DOCUMENTOS SERÁ IRREVERSIBLE, ¿ESTÁS DE ACUERDO?", "ALERTA", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
                                    if (respuestaA == JOptionPane.YES_OPTION) {
                                        cds.aceptarSolicitud(listSolicitudes.get(posicion));
                                        JOptionPane.showMessageDialog(null, "LA SOLICITUD DE CAMBIO FUE APROBADA");
                                        cerrarVentana();
                                        cds.abrirSolicitudCambioGUI(usr);
                                    }
                                    break;
                                case 11:
                                    int respuestaE = JOptionPane.showConfirmDialog(this, "LA INFORMACIÓN DE LA SOLICITUD DE CAMBIO SERÁ ELIMINADA, ¿ESTÁS DE ACUERDO?", "ALERTA", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
                                    if (respuestaE == JOptionPane.YES_OPTION) {
                                        cds.eliminarSolicitud(id);
                                        cerrarVentana();
                                        JOptionPane.showMessageDialog(this, "DATOS ELIMINADOS CORRECTAMENTE");
                                        cds.abrirSolicitudCambioGUI(usr);
                                    }
                                    break;
                            }
                        } catch (ClassNotFoundException | SQLException ex) {
                            Logger.getLogger(ProcedimientosGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                }
            }
        }
    }//GEN-LAST:event_tblSolicitudesMouseClicked

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        cerrarVentana();
        cds.abrirControlDocumentosGUI(usr);
    }//GEN-LAST:event_btnCerrarActionPerformed

    public void cerrarVentana() {
        SolicitudesGUI.this.dispose();
    }

    public void inicializarVentanaYComponentes() throws ClassNotFoundException {
        try {
            initComponents();
            this.setResizable(false);
            this.setLocationRelativeTo(null);
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

            this.modeloTabla = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            this.conexion = Conexion.getInstance();
            listSolicitudes = cds.recuperarSolicitudes(conexion);
            DefaultTableModel tableModel = construirModeloTabla();
            tblSolicitudes.setModel(tableModel);
            tblSolicitudes.setRowHeight(40);
            mostrarDatosTabla();
        } catch (SQLException ex) {
            Logger.getLogger(SolicitudesGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private DefaultTableModel construirModeloTabla() {
        modeloTabla.addColumn("CÓDIGO");
        modeloTabla.addColumn("PROCESO");
        modeloTabla.addColumn("PROCEDIMIENTO");
        modeloTabla.addColumn("REV. ANTERIOR");
        modeloTabla.addColumn("REV. NUEVA");
        modeloTabla.addColumn("ENCARGADO");
        modeloTabla.addColumn("ACCIÓN");
        modeloTabla.addColumn("TIPO DE ARCHIVO");
        modeloTabla.addColumn("NOMBRE NUEVO");
        modeloTabla.addColumn("ARCHIVO");
        modeloTabla.addColumn("ACEPTAR");
        modeloTabla.addColumn("DENEGAR");
        return modeloTabla;
    }

    public void mostrarDatosTabla() throws SQLException, ClassNotFoundException {
        modeloTabla.setRowCount(0);
        Button boton = new Button();
        Button btnAceptar = new Button();
        Button btnRechazar = new Button();

        boton.setIcon(Iconos.ICONO_VER);
        btnAceptar.setIcon(Iconos.ICONO_ACEPTAR);
        btnRechazar.setIcon(Iconos.ICONO_RECHAZAR);

        if (this.listSolicitudes != null) {
            listSolicitudes.stream().map((pro) -> { // Se utiliza la expresión lambda y las funcion stream para el manejo de la información
                Object fila[] = new Object[12];
                fila[0] = pro.getCodigo();
                fila[1] = pro.getProceso();
                fila[2] = pro.getProcedimiento();
                fila[3] = pro.getRevAnterior();
                fila[4] = pro.getRevNueva();
                fila[5] = pro.getEncargado();
                fila[6] = pro.getAccion();
                fila[7] = pro.getTipoArchivo();
                fila[8] = pro.getNombre();
                fila[9] = cds.crearBoton(pro.getArchivo(), Iconos.ICONO_VER, "Vacío");
                fila[10] = btnAceptar;
                fila[11] = btnRechazar;
                return fila;
            }).forEachOrdered((fila) -> { // Cada elemento que se encuentra se agrega como fila a la tabla
                modeloTabla.addRow(fila);
            });
        }
        tblSolicitudes.setDefaultRenderer(Object.class, new imgTabla());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SolicitudesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SolicitudesGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCerrar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblJCIcono;
    private javax.swing.JLabel lblSolicitudesCambios;
    private javax.swing.JTable tblSolicitudes;
    // End of variables declaration//GEN-END:variables
}
