package Documentos;

import Modelos.DocumentosM;
import Modelos.Iconos;
import Modelos.ProcedimientosM;
import Modelos.Usuarios;
import Servicios.Conexion;
import Servicios.ControlDocumentacionServicio;
import Servicios.Utilidades;
import Servicios.imgTabla;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import swing.Button;

public class ProcedimientosGUI extends javax.swing.JFrame {

    // Atributos
    private Usuarios usuario; // Usuario autenticado en la aplicación
    private Connection conexion; // Conexión a la Base de Datos
    private ProcedimientosM procedimiento; // Objeto para manejar la documentacion por procedimiento
    private DefaultTableModel modeloTabla; // Definición de la estructura de la tabla
    private List<DocumentosM> listaDocumentos; // Listas para el control del formato
    private ControlDocumentacionServicio cds; // Listas de información de control de documentación

    // Columnas de la tabla
    private static final int COLUMNA_TIPO_ARCHIVO = 0;
    private static final int COLUMNA_FECHA_ACTUALIZACION = 1;
    private static final int COLUMNA_NOMBRE = 2;
    private static final int COLUMNA_ARCHIVO = 3;
    private static final int COLUMNA_MODIFICAR = 4;
    private static final int COLUMNA_ELIMINAR = 5;

    public ProcedimientosGUI() {
        inicializarVentanaYComponentes();
    }

    public ProcedimientosGUI(Usuarios usuario, ProcedimientosM procedimiento) {
        this.usuario = usuario;
        this.procedimiento = procedimiento;
        inicializarVentanaYComponentes();
    }

    @Override
    public Image getIconImage() { // Método para cambiar el icono en la barra del titulo
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("jc/img/jc.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblJCIcono = new javax.swing.JLabel();
        lblProcedimiento = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDocumentos = new javax.swing.JTable();
        btnCerrar = new swing.Button(new Color(255, 76, 76),new Color(255, 50, 50));
        jLabel1 = new javax.swing.JLabel();
        btnFormatos = new swing.Button(new Color(255, 214, 125),new Color(255, 200, 81));
        btnAgregarDocumentos = new swing.Button(new Color(255, 214, 125),new Color(255, 200, 81));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(251, 251, 251));
        jPanel1.setForeground(new java.awt.Color(242, 242, 242));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblJCIcono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/jcLogo.png"))); // NOI18N
        jPanel1.add(lblJCIcono, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, -1, -1));

        lblProcedimiento.setFont(new java.awt.Font("Wide Latin", 1, 14)); // NOI18N
        lblProcedimiento.setForeground(new java.awt.Color(10, 110, 255));
        lblProcedimiento.setText("Procedimiento:");
        jPanel1.add(lblProcedimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 880, 60));

        tblDocumentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TIPO DE DOCUMENTO", "FECHA DE ACTUALIZACIÓN", "NOMBRE", "ARCHIVO", "REGISTROS"
            }
        ));
        tblDocumentos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDocumentosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDocumentos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 1170, 170));

        btnCerrar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCerrar.setForeground(new java.awt.Color(255, 255, 255));
        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/cancelar.png"))); // NOI18N
        btnCerrar.setText("CERRAR");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 130, 50));

        jLabel1.setFont(new java.awt.Font("Wide Latin", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(10, 110, 255));
        jLabel1.setText("Documentos:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        btnFormatos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnFormatos.setForeground(new java.awt.Color(255, 255, 255));
        btnFormatos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/Factura.png"))); // NOI18N
        btnFormatos.setText("VER FORMATOS");
        btnFormatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFormatosActionPerformed(evt);
            }
        });
        jPanel1.add(btnFormatos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 200, 50));

        btnAgregarDocumentos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAgregarDocumentos.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarDocumentos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/1004733.png"))); // NOI18N
        btnAgregarDocumentos.setText("AGREGAR DOCUMENTOS");
        btnAgregarDocumentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarDocumentosActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregarDocumentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 310, 250, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1190, 480));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblDocumentosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDocumentosMouseClicked
        int columnaSeleccionada = tblDocumentos.getColumnModel().getColumnIndexAtX(evt.getX());
        int filaSeleccionada = tblDocumentos.rowAtPoint(evt.getPoint());

        if (Utilidades.esCeldaValida(tblDocumentos, filaSeleccionada, columnaSeleccionada)) {
            Object value = tblDocumentos.getValueAt(filaSeleccionada, columnaSeleccionada);
            if (value instanceof JButton) {
                JButton boton = (JButton) value;
                manejarAccionBoton(boton, filaSeleccionada, columnaSeleccionada);
            }
        }
    }//GEN-LAST:event_tblDocumentosMouseClicked

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        cerrarVentana();
        cds.abrirDocumentacionGUI(usuario, procedimiento.getIdp());
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnFormatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFormatosActionPerformed
        cerrarVentana();
        cds.abrirFormatosGUI(usuario, procedimiento);
    }//GEN-LAST:event_btnFormatosActionPerformed

    private void btnAgregarDocumentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarDocumentosActionPerformed
        cerrarVentana();
        cds.abrirAgregarDocumentosGUI(usuario, procedimiento);
    }//GEN-LAST:event_btnAgregarDocumentosActionPerformed

    private void inicializarVentanaYComponentes() {
        try {
            configurarVentana();
            lblProcedimiento.setText("<html>PROCEDIMIENTO: <br>" + procedimiento.getProcedimiento() + "</html>");
            this.conexion = Conexion.getInstance().conectar();
            this.cds = new ControlDocumentacionServicio();
            inicializarTabla();
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("Error al abrir ProcedimientosGUI: ", ex);
            Logger.getLogger(ProcedimientosGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void configurarVentana() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
    }

    private void inicializarTabla() {
        try {
            this.modeloTabla = construirModeloTabla();
            this.listaDocumentos = cds.obtenerDocumentos(conexion, procedimiento.getId());
            tblDocumentos.setModel(modeloTabla);
            tblDocumentos.setRowHeight(40);
            mostrarDatosTabla();
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("Error al inicializar la tabla: ", ex);
            Logger.getLogger(FormatosGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private DefaultTableModel construirModeloTabla() {
        final String[] nombresColumnas;

        if (cds.esUsuarioAutorizado(usuario)) {
            nombresColumnas = new String[]{"TIPO DE DOCUMENTO", "FECHA DE ACTUALIZACIÓN", "NOMBRE", "ARCHIVO", "MODIFICAR", "ELIMINAR"};
        } else {
            nombresColumnas = new String[]{"TIPO DE DOCUMENTO", "FECHA DE ACTUALIZACIÓN", "NOMBRE", "ARCHIVO"};
        }

        modeloTabla = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        modeloTabla.setColumnIdentifiers(nombresColumnas);

        return modeloTabla;
    }

    public void mostrarDatosTabla() {
        limpiarTabla();
        llenarTabla();
        configurarRenderizacionTabla();
    }

    private void limpiarTabla() {
        modeloTabla.setRowCount(0);
    }

    private void llenarTabla() {
        if (listaDocumentos != null && !listaDocumentos.isEmpty()) {
            listaDocumentos.forEach(documento -> {
                Object[] fila = crearFila(documento);
                modeloTabla.addRow(fila);
            });
        }
    }

    private Object[] crearFila(DocumentosM documento) {
        Button botonModificar = new Button();
        botonModificar.setIcon(Iconos.ICONO_MODIFICAR);
        Button botonEliminar = new Button();
        botonEliminar.setIcon(Iconos.ICONO_RECHAZAR);
        Object fila[];
        if (cds.esUsuarioAutorizado(usuario)) {
            fila = new Object[6];
            fila[COLUMNA_TIPO_ARCHIVO] = documento.getTipo();
            fila[COLUMNA_FECHA_ACTUALIZACION] = documento.getFechaActualizacion();
            fila[COLUMNA_NOMBRE] = documento.getNombre();
            fila[COLUMNA_ARCHIVO] = cds.crearBoton(documento.getContenido(), Iconos.ICONO_VER, "Vacío");
            fila[COLUMNA_MODIFICAR] = botonModificar;
            fila[COLUMNA_ELIMINAR] = botonEliminar;
        } else {
            fila = new Object[4];
            fila[COLUMNA_TIPO_ARCHIVO] = documento.getTipo();
            fila[COLUMNA_FECHA_ACTUALIZACION] = documento.getFechaActualizacion();
            fila[COLUMNA_NOMBRE] = documento.getNombre();
            fila[COLUMNA_ARCHIVO] = cds.crearBoton(documento.getContenido(), Iconos.ICONO_VER, "Vacío");
        }
        return fila;
    }

    private void configurarRenderizacionTabla() {
        tblDocumentos.setDefaultRenderer(Object.class, new imgTabla());
    }

    private void manejarAccionBoton(JButton boton, int filaSeleccionada, int columnaSeleccionada) {
        String textoPrimeraCelda = obtenerTextoPrimeraCelda(filaSeleccionada);
        switch (boton.getText()) {
            case "Vacío":
                JOptionPane.showMessageDialog(null, "No hay archivo");
                break;
            default:
                manejarAccionDefault(textoPrimeraCelda, columnaSeleccionada, listaDocumentos.get(filaSeleccionada));
                break;
        }
    }

    private void manejarAccionDefault(String textoPrimeraCelda, int columnaSeleccionada, DocumentosM documento) {
        try {
            if (columnaSeleccionada == 3) {
                cds.ejecutarManual(conexion, procedimiento, textoPrimeraCelda);
            }

            if (columnaSeleccionada == 4) {
                cerrarVentana();
                cds.abrirModificarArchivosGUI(usuario, documento);
            }

            if (columnaSeleccionada == 5) {
                int filaSeleccionada = tblDocumentos.getSelectedRow();

                if (filaSeleccionada == -1) {
                    JOptionPane.showMessageDialog(this, "Por favor seleccione una fila.");
                    return;
                }

                if (Utilidades.confirmarEliminacion()) {
                    eliminarDocumento(listaDocumentos.get(filaSeleccionada));
                }

                cerrarVentana();
                cds.abrirModificarArchivosGUI(usuario, documento);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Utilidades.manejarExcepcion("ERROR en la operación: ", ex);
            Logger.getLogger(ProcedimientosGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void cerrarVentana() {
        ProcedimientosGUI.this.dispose();
        Conexion.getInstance().desconectar(conexion);
    }

    private String obtenerTextoPrimeraCelda(int filaSeleccionada) {
        Object firstCellValue = tblDocumentos.getValueAt(filaSeleccionada, 0);
        return firstCellValue != null ? firstCellValue.toString() : "";
    }

    private void eliminarDocumento(DocumentosM documento) {
        cds.eliminarDocumento(conexion, documento);
        cerrarVentana();
        JOptionPane.showMessageDialog(this, "DATOS ELIMINADOS CORRECTAMENTE");
        cds.abrirDocumentacionGUI(usuario, procedimiento.getIdp());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProcedimientosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ProcedimientosGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarDocumentos;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnFormatos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblJCIcono;
    private javax.swing.JLabel lblProcedimiento;
    private javax.swing.JTable tblDocumentos;
    // End of variables declaration//GEN-END:variables
}
