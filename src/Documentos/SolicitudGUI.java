package Documentos;

import Modelos.DocumentosM;
import Modelos.FormatosM;
import Modelos.ProcedimientosM;
import Modelos.ProcesosM;
import Modelos.SolicitudesM;
import Modelos.Usuarios;
import Servicios.Conexion;
import Servicios.ControlDocumentacionServicio;
import Servicios.Utilidades;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class SolicitudGUI extends javax.swing.JFrame {

    // Atributos
    private Usuarios usuario; // Usuario autenticado en la aplicación
    private Connection conexion; // Conexión a la Base de Datos
    private ProcesosM proceso; // Objeto para manejar la información del proceso
    private int indexSeleccionado; // atributos para la posicion de los procedimientos 
    private List<FormatosM> listaFormatos; // Lista de Formatos
    private List<DocumentosM> listaInstructivos; // Lista de otros instructivos
    private List<ProcedimientosM> listaProcedimientos; // Lista de procedimientos
    private ControlDocumentacionServicio cds; // Servicio para manejar el control de documentos

    public SolicitudGUI() {
        initComponents();
    }

    public SolicitudGUI(Usuarios usuario, ProcesosM proceso) {
        this.usuario = usuario;
        this.proceso = proceso;
        inicializarVentanaYComponentes();
    }

    @Override
    public Image getIconImage() { // Método para cambiar el icono en la barra del titulo
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("jc/img/jc.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        lblJCIcono = new javax.swing.JLabel();
        lblSolicitud = new javax.swing.JLabel();
        lblProceso = new javax.swing.JLabel();
        btnCerrar = new swing.Button(new Color(255, 76, 76),new Color(255, 50, 50));
        btnSolicitud = new swing.Button(new Color(121, 190, 255),new Color(10, 110, 255));
        lblAccion = new javax.swing.JLabel();
        cbxAccion = new swing.ComboBoxSuggestion();
        lblFormatoNuevo = new javax.swing.JLabel();
        txtNuevaRevision = new swing.TextField();
        btnNuevoArchivo = new swing.Button(new Color(255, 214, 125),new Color(255, 200, 81));
        lblRevAnterior = new javax.swing.JLabel();
        lblRevNueva = new javax.swing.JLabel();
        lblEncargado = new javax.swing.JLabel();
        txtEncargado = new swing.TextField();
        txtRevAnterior = new swing.TextField();
        txtNombreArchivo = new swing.TextField();
        lblTipo = new javax.swing.JLabel();
        cbxTipoArchivo = new swing.ComboBoxSuggestion();
        lblProcedimiento = new javax.swing.JLabel();
        cbxProcedimientos = new swing.ComboBoxSuggestion();
        lblDocumentos = new javax.swing.JLabel();
        cbxDocumentos = new swing.ComboBoxSuggestion();

        jInternalFrame1.setVisible(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(251, 251, 251));
        jPanel1.setForeground(new java.awt.Color(242, 242, 242));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblJCIcono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/jcLogo.png"))); // NOI18N
        jPanel1.add(lblJCIcono, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, -1, -1));

        lblSolicitud.setFont(new java.awt.Font("Wide Latin", 1, 14)); // NOI18N
        lblSolicitud.setForeground(new java.awt.Color(10, 110, 255));
        lblSolicitud.setText("SOLICITUD DE CAMBIO");
        jPanel1.add(lblSolicitud, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 340, 50));

        lblProceso.setFont(new java.awt.Font("Wide Latin", 1, 14)); // NOI18N
        lblProceso.setForeground(new java.awt.Color(10, 110, 255));
        lblProceso.setText("Proceso:");
        jPanel1.add(lblProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, -1, -1));

        btnCerrar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCerrar.setForeground(new java.awt.Color(255, 255, 255));
        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/cancelar.png"))); // NOI18N
        btnCerrar.setText("CERRAR");
        btnCerrar.setToolTipText("");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 520, 130, 50));

        btnSolicitud.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSolicitud.setForeground(new java.awt.Color(255, 255, 255));
        btnSolicitud.setText("SOLICITAR CAMBIO");
        btnSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolicitudActionPerformed(evt);
            }
        });
        jPanel1.add(btnSolicitud, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 500, 270, 50));

        lblAccion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAccion.setForeground(new java.awt.Color(10, 110, 255));
        lblAccion.setText("ACCIÓN:");
        jPanel1.add(lblAccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, -1));

        cbxAccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ACTUALIZAR", "AGREGAR", "ELIMINAR" }));
        cbxAccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAccionActionPerformed(evt);
            }
        });
        jPanel1.add(cbxAccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 260, -1));

        lblFormatoNuevo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFormatoNuevo.setForeground(new java.awt.Color(10, 110, 255));
        lblFormatoNuevo.setText("NUEVO FORMATO:");
        jPanel1.add(lblFormatoNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, -1, -1));
        jPanel1.add(txtNuevaRevision, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 350, 200, -1));

        btnNuevoArchivo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnNuevoArchivo.setForeground(new java.awt.Color(255, 255, 255));
        btnNuevoArchivo.setText("Seleccionar Archivos");
        btnNuevoArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoArchivoActionPerformed(evt);
            }
        });
        jPanel1.add(btnNuevoArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 400, 200, 50));

        lblRevAnterior.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRevAnterior.setForeground(new java.awt.Color(10, 110, 255));
        lblRevAnterior.setText("REVISIÓN ANTERIOR:");
        jPanel1.add(lblRevAnterior, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, -1));

        lblRevNueva.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRevNueva.setForeground(new java.awt.Color(10, 110, 255));
        lblRevNueva.setText("NUEVA REVISIÓN:");
        jPanel1.add(lblRevNueva, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, -1, -1));

        lblEncargado.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblEncargado.setForeground(new java.awt.Color(10, 110, 255));
        lblEncargado.setText("DUEÑO DEL PROCESO: ");
        jPanel1.add(lblEncargado, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        txtEncargado.setEnabled(false);
        jPanel1.add(txtEncargado, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, 300, -1));
        jPanel1.add(txtRevAnterior, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 300, 170, -1));
        jPanel1.add(txtNombreArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 410, 190, -1));

        lblTipo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTipo.setForeground(new java.awt.Color(10, 110, 255));
        lblTipo.setText("TIPO DE ARCHIVO:");
        jPanel1.add(lblTipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        cbxTipoArchivo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MANUAL", "DIAGRAMA DE FLUJO", "DIAGRAMA DE TORTUGA", "INSTRUCTIVO", "FORMATO" }));
        cbxTipoArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTipoArchivoActionPerformed(evt);
            }
        });
        jPanel1.add(cbxTipoArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 270, -1));

        lblProcedimiento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProcedimiento.setForeground(new java.awt.Color(10, 110, 255));
        lblProcedimiento.setText("PROCEDIMIENTO:");
        jPanel1.add(lblProcedimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, -1));

        cbxProcedimientos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxProcedimientosActionPerformed(evt);
            }
        });
        jPanel1.add(cbxProcedimientos, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, 350, -1));

        lblDocumentos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDocumentos.setForeground(new java.awt.Color(10, 110, 255));
        lblDocumentos.setText("DOCUMENTOS:");
        jPanel1.add(lblDocumentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 260, 120, -1));

        jPanel1.add(cbxDocumentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 250, 370, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1090, 590));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        cerrarVentana();
        cds.abrirControlDocumentosGUI(usuario);
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolicitudActionPerformed
        if (cbxAccion.getSelectedItem().toString().equals("AGREGAR")) {
            gestionarInsercion();
        } else {
            realizarSolicitud();
        }
    }//GEN-LAST:event_btnSolicitudActionPerformed

    private void btnNuevoArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoArchivoActionPerformed
        File archivoSeleccionado = cds.seleccionarArchivo(this);
        if (archivoSeleccionado != null) {
            try {
                String nombreArchivo = archivoSeleccionado.getName(); // Obtener el nombre del archivo
                Files.copy(archivoSeleccionado.toPath(), Paths.get("\\\\" + Utilidades.SERVIDOR + "\\archivos\\ControlDocumentos\\Solicitudes\\" + archivoSeleccionado.getName()), StandardCopyOption.REPLACE_EXISTING); // Copiar el archivo al servidor
                txtNombreArchivo.setText(nombreArchivo);
            } catch (IOException ex) {
                Utilidades.manejarExcepcion("ERROR al seleccionar el archivo", ex);
                Logger.getLogger(SolicitudGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnNuevoArchivoActionPerformed

    private void cbxProcedimientosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxProcedimientosActionPerformed
        cbxDocumentos.removeAllItems();
        indexSeleccionado = cbxProcedimientos.getSelectedIndex();

        if (indexSeleccionado >= 0) {
            txtRevAnterior.setText(listaProcedimientos.get(indexSeleccionado).getRevision());
        }

        String tipoArchivo = cbxTipoArchivo.getSelectedItem().toString();

        switch (tipoArchivo) {
            case "INSTRUCTIVO":
            case "FORMATO":
                manejarTipoArchivo(tipoArchivo, indexSeleccionado);
                break;
        }
    }//GEN-LAST:event_cbxProcedimientosActionPerformed

    private void cbxTipoArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTipoArchivoActionPerformed
        configurarAccionComboBox();
        String tipoArchivo = cbxTipoArchivo.getSelectedItem().toString();
        if (cbxAccion.getSelectedItem().toString().equals("AGREGAR") || tipoArchivo.equals("FORMATO") || tipoArchivo.equals("INSTRUCTIVO")) {
            txtNuevaRevision.setVisible(false);
            lblRevNueva.setVisible(false);
        }
    }//GEN-LAST:event_cbxTipoArchivoActionPerformed

    private void cbxAccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAccionActionPerformed
        configurarAccionComboBox();
    }//GEN-LAST:event_cbxAccionActionPerformed

    private void gestionarInsercion() {
        String archivo = cbxTipoArchivo.getSelectedItem().toString();
        boolean existe = false;

        switch (archivo) {
            case "MANUAL":
            case "DIAGRAMA DE FLUJO":
                existe = cds.existeDocumento(conexion, proceso.getId(), archivo);
                break;

            case "DIAGRAMA DE TORTUGA":
                existe = cds.existeDiagramaTortuga(conexion, proceso.getId());
                break;

            default:
                // Si el archivo es un instructivo o formato, lo agrega sin condición
                if (archivo.equals("INSTRUCTIVO") || archivo.equals("FORMATO")) {
                    realizarSolicitud(); // Realiza la solicitud directamente
                }
                return; // Finaliza el método
        }

        // Si el tipo de archivo requiere validación y ya existe, muestra un mensaje
        if (existe) {
            JOptionPane.showMessageDialog(this, "Ya existe un documento tipo " + archivo + " para el procedimiento seleccionado", "DOCUMENTO EXISTENTE", JOptionPane.WARNING_MESSAGE);
        } else if (!archivo.equals("INSTRUCTIVO") && !archivo.equals("FORMATO")) {
            realizarSolicitud(); // Realiza la solicitud si no existe el documento
        }
    }

    private void inicializarVentanaYComponentes() {
        try {
            configurarVentana();
            inicializarAtributos();
            configurarLabelsYTextFields();
            configurarProcedimientosComboBox();
            configurarAccionComboBox();
        } catch (SQLException | ClassNotFoundException ex) {
            Utilidades.manejarExcepcion("ERROR al abrir SolicitudGUI: ", ex);
            Logger.getLogger(SolicitudGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void realizarSolicitud() {
        JOptionPane.showMessageDialog(this, "SE HA REALIZADO LA SOLICITUD DE CAMBIO");
        SolicitudesM solicitudCambio = crearSolicitudCambio();
        solicitudCambio.setRutaArchivo("archivos/ControlDocumentos/Solicitudes/" + txtNombreArchivo.getText());
        cds.agregarSolicitud(conexion, solicitudCambio);
        cerrarVentana();
        cds.abrirControlDocumentosGUI(usuario);
    }

    private void configurarVentana() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
    }

    private void inicializarAtributos() throws SQLException {
        this.conexion = Conexion.getInstance().conectar();
        this.cds = new ControlDocumentacionServicio();
    }

    private void configurarLabelsYTextFields() {
        lblProceso.setText("PROCESO: " + proceso.getProceso());
        txtEncargado.setText(proceso.getEncargado());
    }

    private void configurarProcedimientosComboBox() throws SQLException, ClassNotFoundException {
        listaProcedimientos = cds.recuperarProcedimientos(conexion, proceso.getId());
        listaProcedimientos.forEach((procedimiento) -> {
            cbxProcedimientos.addItem(procedimiento.getProcedimiento());
        });
    }

    private void solicitarActualizacion() throws SQLException {
        String archivo = cbxTipoArchivo.getSelectedItem().toString();
        switch (archivo) {
            case "MANUAL":
            case "DIAGRAMA DE FLUJO":
                mostrarComponentesManualesDiagramas();
                break;
            case "DIAGRAMA DE TORTUGA":
                mostrarComponentesDiagramaTortuga();
                break;
            case "INSTRUCTIVO":
                actualizarDoctos("INSTRUCTIVO", indexSeleccionado);
                mostrarComponentesInstructivosFormatos();
                break;
            case "FORMATO":
                actualizarDoctos("formato", indexSeleccionado);
                mostrarComponentesInstructivosFormatos();
                break;
            default:

                break;
        }
    }

    private void mostrarComponentesManualesDiagramas() {
        lblDocumentos.setVisible(false);
        cbxDocumentos.setVisible(false);
        lblProcedimiento.setVisible(true);
        cbxProcedimientos.setVisible(true);
        lblRevAnterior.setVisible(true);
        txtNuevaRevision.setVisible(true);
        lblRevNueva.setVisible(true);
        txtRevAnterior.setVisible(true);
    }

    private void mostrarComponentesDiagramaTortuga() {
        lblProcedimiento.setVisible(true);
        cbxProcedimientos.setVisible(true);
        lblRevAnterior.setVisible(false);
        txtNuevaRevision.setVisible(false);
        lblRevNueva.setVisible(false);
        txtRevAnterior.setVisible(false);
        cbxDocumentos.setVisible(false);
        lblDocumentos.setVisible(false);
        cbxProcedimientos.setVisible(false);
        lblProcedimiento.setVisible(false);
    }

    private void mostrarComponentesInstructivosFormatos() {
        lblProcedimiento.setVisible(true);
        cbxProcedimientos.setVisible(true);
        lblRevAnterior.setVisible(false);
        txtNuevaRevision.setVisible(false);
        lblRevNueva.setVisible(false);
        txtRevAnterior.setVisible(false);
    }

    private void configurarAccionComboBox() {
        try {
            String accion = cbxAccion.getSelectedItem().toString();
            switch (accion) {
                case "ACTUALIZAR":
                    solicitarActualizacion();
                    break;
                case "AGREGAR":
                    solicitarInsercion();
                    break;
                case "ELIMINAR":
                    eliminarElemento();
                    break;
            }
        } catch (SQLException ex) {
            Logger.getLogger(SolicitudGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void solicitarInsercion() {
        txtRevAnterior.setVisible(false);
        lblRevAnterior.setVisible(false);
        cbxDocumentos.setVisible(false);
        lblDocumentos.setVisible(false);
        lblRevNueva.setText("REVISIÓN: ");
    }

    private void eliminarElemento() {
        txtRevAnterior.setVisible(false);
        lblRevAnterior.setVisible(false);
        txtNuevaRevision.setVisible(false);
        lblRevNueva.setVisible(false);
        btnNuevoArchivo.setVisible(false);
        lblFormatoNuevo.setText("ARCHIVO: ");
        txtNombreArchivo.setText(obtenerDocumento());
    }

    private String obtenerDocumento() {
        String archivo = cbxTipoArchivo.getSelectedItem().toString();
        if (archivo.equals("MANUAL") || archivo.equals("DIAGRAMA DE FLUJO")) {
            return cds.obtenerNombreDocumento(conexion, proceso.getId(), archivo);
        } else if (archivo.equals("INSTRUCTIVO") || archivo.equals("FORMATO")) {
            try {
                actualizarDoctos(archivo, indexSeleccionado);
                txtNombreArchivo.setVisible(false);
                lblFormatoNuevo.setVisible(false);
            } catch (SQLException ex) {
                Logger.getLogger(SolicitudGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (archivo.equals("DIAGRAMA DE TORTUGA")) {
            return cds.obtenerNombreDiagramaTortuga(conexion, proceso.getId());
        }
        return null;
    }

    private void cerrarVentana() {
        SolicitudGUI.this.dispose();
        Conexion.getInstance().desconectar(conexion);
    }

    private SolicitudesM crearSolicitudCambio() {
        ProcedimientosM procedimientoSeleccionado = listaProcedimientos.get(indexSeleccionado);
        String codigo = procedimientoSeleccionado.getCodigo();
        String nombreProceso = proceso.getProceso();
        String nombreProcedimiento = procedimientoSeleccionado.getProcedimiento();
        String antiguaRev = txtRevAnterior.getText();
        String nuevaRev = txtNuevaRevision.getText();
        String encargado = txtEncargado.getText();
        String accion = cbxAccion.getSelectedItem().toString();
        String tipoArchivo = cbxTipoArchivo.getSelectedItem().toString();
        String nombreDocumento = cbxDocumentos.isVisible() ? cbxDocumentos.getSelectedItem().toString() : "";
        String nombreArchivo = txtNombreArchivo.getText().isEmpty() ? cbxDocumentos.getSelectedItem().toString() : txtNombreArchivo.getText();

        return new SolicitudesM(procedimientoSeleccionado.getId(), codigo, nombreProceso, nombreProcedimiento,
                antiguaRev, nuevaRev, encargado, accion, tipoArchivo, nombreDocumento,
                nombreArchivo, null);
    }

    private void manejarTipoArchivo(String tipoArchivo, int index) {
        try {
            actualizarDoctos(tipoArchivo, index);
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("Error al actualizar los " + tipoArchivo + "s", ex);
            Logger.getLogger(SolicitudGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void actualizarDoctos(String tipoDocumento, int index) throws SQLException {
        if (cbxAccion.getSelectedItem().toString().equals("ACTUALIZAR") || cbxAccion.getSelectedItem().toString().equals("ELIMINAR")) {
            if (tipoDocumento.equals("INSTRUCTIVO")) {
                cargarInstructivos(index);
            } else {
                cargarFormatos(index);
            }
        } else {
            visualizarCbxDocumentos(false);

        }
    }

    private void cargarInstructivos(int index) {
        try {
            cbxDocumentos.removeAllItems();

            listaInstructivos = cds.obtenerInstructivos(conexion, listaProcedimientos.get(index).getId(), "INSTRUCTIVO");
            boolean tieneInstructivos = false;

            for (DocumentosM documento : listaInstructivos) {
                if (documento.getTipo().equals("INSTRUCTIVO")) {
                    cbxDocumentos.addItem(documento.getNombre());
                    tieneInstructivos = true;
                }
            }
            visualizarCbxDocumentos(tieneInstructivos);
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("Error al cargar los instrumentos y/o formatos: ", ex);
            Logger.getLogger(SolicitudGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void visualizarCbxDocumentos(boolean documentos) {
        if (!documentos) {
            lblDocumentos.setVisible(false);
            cbxDocumentos.setVisible(false);
        } else {
            lblDocumentos.setVisible(true);
            cbxDocumentos.setVisible(true);
        }
    }

    private void cargarFormatos(int index) throws SQLException {
        cbxDocumentos.removeAllItems();
        listaFormatos = cds.recuperarFormatos(conexion, listaProcedimientos.get(index).getId());
        boolean tieneFormatos = false;
        for (FormatosM formato : listaFormatos) {
            cbxDocumentos.addItem(formato.getNombre());
            tieneFormatos = true;
        }
        visualizarCbxDocumentos(tieneFormatos);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SolicitudGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SolicitudGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnNuevoArchivo;
    private javax.swing.JButton btnSolicitud;
    private javax.swing.JComboBox<String> cbxAccion;
    private javax.swing.JComboBox<String> cbxDocumentos;
    private javax.swing.JComboBox<String> cbxProcedimientos;
    private javax.swing.JComboBox<String> cbxTipoArchivo;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAccion;
    private javax.swing.JLabel lblDocumentos;
    private javax.swing.JLabel lblEncargado;
    private javax.swing.JLabel lblFormatoNuevo;
    private javax.swing.JLabel lblJCIcono;
    private javax.swing.JLabel lblProcedimiento;
    private javax.swing.JLabel lblProceso;
    private javax.swing.JLabel lblRevAnterior;
    private javax.swing.JLabel lblRevNueva;
    private javax.swing.JLabel lblSolicitud;
    private javax.swing.JLabel lblTipo;
    private javax.swing.JTextField txtEncargado;
    private javax.swing.JTextField txtNombreArchivo;
    private javax.swing.JTextField txtNuevaRevision;
    private javax.swing.JTextField txtRevAnterior;
    // End of variables declaration//GEN-END:variables
}
