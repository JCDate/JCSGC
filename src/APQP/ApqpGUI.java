package APQP;

import BotonesAccion.TableActionCellEditor;
import BotonesAccion.TableActionCellRender;
import BotonesAccion.TableActionEvent;
import Modelos.ApqpM;
import Modelos.Usuarios;
import Servicios.ApqpServicio;
import Servicios.Conexion;
import Servicios.Utilidades;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class ApqpGUI extends javax.swing.JFrame {

    // Atributos
    private Usuarios usuario; // Usuario autenticado en la aplicación
    private ApqpServicio apqps; // Servicio para manejar el control de las actividades y los documentos
    private Connection conexion; // Conexión a la Base de Datos
    private List<ApqpM> listaActividades; // Lista de Actividades del Apqp por familia
    private DefaultTableModel modeloTabla; // Definición de la estructura de la tabla
    private TableRowSorter<DefaultTableModel> trs; // Objeto filtrador de campos de la tabla

    public ApqpGUI() {
        initComponents();
    }

    public ApqpGUI(Usuarios usuario) {
        this.usuario = usuario;
        inicializarVentanaYComponentes();
    }

    @Override
    public Image getIconImage() { // Método para cambiar el icono en la barra del titulo
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("jc/img/jc.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtBuscador = new swing.TextField();
        jPanel1 = new javax.swing.JPanel();
        lblJCIcono = new javax.swing.JLabel();
        lblAPQP = new javax.swing.JLabel();
        lblSeleccionarFamilia = new javax.swing.JLabel();
        cbxFamilia = new swing.ComboBoxSuggestion();
        btnCerrar = new swing.Button(new Color(255, 76, 76),new Color(255, 50, 50));
        jScrollPane1 = new javax.swing.JScrollPane();
        tblApqp = new javax.swing.JTable();
        btnAgregarEtapa = new swing.Button(new Color(255, 214, 125),new Color(255, 200, 81));

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtBuscador.setPrefixIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/find.png"))); // NOI18N
        getContentPane().add(txtBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 330, -1));
        txtBuscador.getAccessibleContext().setAccessibleParent(this);

        jPanel1.setBackground(new java.awt.Color(251, 251, 251));
        jPanel1.setForeground(new java.awt.Color(242, 242, 242));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblJCIcono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/jcLogo.png"))); // NOI18N
        lblJCIcono.setToolTipText("");
        jPanel1.add(lblJCIcono, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, -1, -1));

        lblAPQP.setFont(new java.awt.Font("Wide Latin", 1, 17)); // NOI18N
        lblAPQP.setForeground(new java.awt.Color(10, 110, 255));
        lblAPQP.setText("PLANEACIÓN AVANZADA DE  LA CALIDAD DEL PRODUCTO");
        jPanel1.add(lblAPQP, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, 1010, -1));

        lblSeleccionarFamilia.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSeleccionarFamilia.setForeground(new java.awt.Color(10, 110, 255));
        lblSeleccionarFamilia.setText("SELECCIONAR FAMILIA: ");
        jPanel1.add(lblSeleccionarFamilia, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        jPanel1.add(cbxFamilia, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, 190, -1));

        btnCerrar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCerrar.setForeground(new java.awt.Color(255, 255, 255));
        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/cancelar.png"))); // NOI18N
        btnCerrar.setText("CERRAR");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 510, 130, 50));

        tblApqp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ETAPA", "NO.", "PUNTOS Y REQUERIMIENTOS PARA EL ANALISIS DE FACTIBILIDAD", "ANÁLISIS DE FACTIBILIDAD", "EQUIPO GERENCIAL", "OPERACIONES"
            }
        ));
        tblApqp.setRowHeight(50);
        jScrollPane1.setViewportView(tblApqp);
        if (tblApqp.getColumnModel().getColumnCount() > 0) {
            tblApqp.getColumnModel().getColumn(5).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 1160, 200));

        btnAgregarEtapa.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAgregarEtapa.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarEtapa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/1004733.png"))); // NOI18N
        btnAgregarEtapa.setText("AGREGAR ACTIVIDAD");
        btnAgregarEtapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarEtapaActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregarEtapa, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 470, 250, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1190, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        cerrarVentana();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnAgregarEtapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarEtapaActionPerformed
        cerrarVentana();
        apqps.abrirAgregarEtapaGUI(usuario);
    }//GEN-LAST:event_btnAgregarEtapaActionPerformed

    private void inicializarVentanaYComponentes() {
        configurarVentana();
        inicializarAtributos();
        obtenerFamilias();
        inicializarTabla();
        configurarBuscador();
        inicializarListeners();
    }

    private void configurarVentana() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
    }

    private void inicializarAtributos() {
        try {
            this.apqps = new ApqpServicio();
            this.conexion = Conexion.getInstance().conectar();
            this.modeloTabla = (DefaultTableModel) tblApqp.getModel();
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("ERROR al inicializar los atributos: ", ex);
            Logger.getLogger(ApqpGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void obtenerFamilias() {
        apqps.obtenerFamilias(conexion, cbxFamilia);
    }

    private void inicializarTabla() {
        try {
            cargarDatosTabla();
            configurarOrdenamiento();
            configurarAccionesTabla();
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("Error al inicializar la tabla: ", ex);
            Logger.getLogger(ApqpGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarDatosTabla() throws SQLException {
        String familiaSeleccionada = cbxFamilia.getSelectedItem().toString();
        this.listaActividades = apqps.recuperarActividades(conexion, familiaSeleccionada);
        mostrarDatosTabla();
    }

    private void mostrarDatosTabla() {
        limpiarTabla();
        llenarTabla();
    }

    private void limpiarTabla() {
        modeloTabla.setRowCount(0);
    }

    private void llenarTabla() {
        if (listaActividades != null && !listaActividades.isEmpty()) {
            listaActividades.forEach(actividad -> {
                Object[] fila = crearFila(actividad);
                modeloTabla.addRow(fila);
            });
        }
    }

    private Object[] crearFila(ApqpM actividad) {
        Object fila[];
        fila = new Object[6];
        fila[0] = actividad.getEtapa();
        fila[1] = actividad.getActividad();
        fila[2] = actividad.getRequerimientos();
        fila[3] = actividad.getFactibilidad();
        fila[4] = actividad.getEquipo();
        fila[5] = "OPERACIONES";
        return fila;
    }

    private void configurarOrdenamiento() {
        trs = new TableRowSorter(tblApqp.getModel());
        tblApqp.setRowSorter(trs);
    }

    private void configurarAccionesTabla() {
        TableActionEvent event = crearTableActionEvent();
        tblApqp.getColumnModel().getColumn(5).setCellRenderer(new TableActionCellRender(true, true, true, false, false, false));
        tblApqp.getColumnModel().getColumn(5).setCellEditor(new TableActionCellEditor(event, true, true, true, false, false, false));
    }

    private void configurarBuscador() {
        txtBuscador.setPrefixIcon(new ImageIcon(getClass().getResource("/icon/find.png")));
        txtBuscador.setHint("Buscar...");
    }

    private void inicializarListeners() {
        configurarListenerBuscador();
        configurarSelectorFamilia();
    }

    private void configurarListenerBuscador() {
        txtBuscador.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent ke) {
                filtrarBusqueda();
            }
        });
    }

    private void filtrarBusqueda() {
        String textoBusqueda = txtBuscador.getText();

        if (textoBusqueda == null || textoBusqueda.trim().isEmpty()) {
            trs.setRowFilter(null);
            return;
        }

        RowFilter<DefaultTableModel, Object> rowFilter = RowFilter.regexFilter(textoBusqueda, 0, 1, 2, 3); // Se definen cuales columnas se van a filtrar
        trs.setRowFilter(rowFilter);
    }

    private void configurarSelectorFamilia() {
        cbxFamilia.addActionListener(e -> actualizarDatosPorFamilia());
    }

    private void actualizarDatosPorFamilia() {
        try {
            String familiaSeleccionada = cbxFamilia.getSelectedItem().toString();
            listaActividades = apqps.recuperarActividades(conexion, familiaSeleccionada);
            mostrarDatosTabla();
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("Error al mostrar la información en la tabla: ", ex);
            Logger.getLogger(ApqpGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void eliminarActividad(ApqpM actividad) {
        apqps.eliminarDocumento(conexion, actividad);
        apqps.eliminarActividad(conexion, actividad);
        cerrarVentana();
        JOptionPane.showMessageDialog(this, "DATOS ELIMINADOS CORRECTAMENTE");
        apqps.abrirApqpGUI(usuario);
    }

    private TableActionEvent crearTableActionEvent() {
        return new TableActionEvent() {
            @Override
            public void onEdit(int row) {
                cerrarVentana();
                apqps.abrirModificarApqpGUI(usuario, listaActividades.get(row));
            }

            @Override
            public void onDelete(int row) {
                if (Utilidades.confirmarEliminacion()) {
                    eliminarActividad(listaActividades.get(row));
                }
            }

            @Override
            public void onView(int row) {
                apqps.abrirDocumentosApqpGUI(usuario, listaActividades.get(row));
            }

            @Override
            public void onOpenRecords(int row) {
                // Nada...
            }

            @Override
            public void onAccept(int row) {
                // Nada...
            }

            @Override
            public void onReject(int row) {
                // Nada...
            }
        };
    }

    private void cerrarVentana() {
        ApqpGUI.this.dispose();
        Conexion.getInstance().desconectar(conexion);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApqpGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ApqpGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarEtapa;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JComboBox<String> cbxFamilia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAPQP;
    private javax.swing.JLabel lblJCIcono;
    private javax.swing.JLabel lblSeleccionarFamilia;
    private javax.swing.JTable tblApqp;
    private swing.TextField txtBuscador;
    // End of variables declaration//GEN-END:variables
}
