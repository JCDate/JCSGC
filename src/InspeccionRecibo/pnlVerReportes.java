package InspeccionRecibo;

import BotonesAccion.TableActionCellEditorIR;
import BotonesAccion.TableActionCellRenderIR;
import BotonesAccion.TableActionEventIR;
import Modelos.InspeccionReciboM;
import Modelos.Usuarios;
import Paginacion.estilo.PaginationItemRenderStyle1;
import Servicios.GeneradorExcel;
import Servicios.InspeccionReciboServicio;
import Servicios.Utilidades;
import java.awt.Color;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class pnlVerReportes extends javax.swing.JPanel {

    // Atributos 
    private Usuarios usuario;// Usuario
    private Connection conexion; // Conexión a la base de datos
    private DefaultTableModel modeloTabla; // Definición de la estructura de la tabla
    private InspeccionReciboServicio irs; // Servicios y Utilidades
    private GeneradorExcel excel; // Servicio para trabajar con archivos excel    
    private List<InspeccionReciboM> listaInspeccionRecibo; // Lista de registros de Inspección Recibo
    private TableRowSorter<DefaultTableModel> trs; // filtrado de los campos de la tabla

    // Columnas de la tabla
    private static final int COLUMNA_NO_HOJA = 0;
    private static final int COLUMNA_FECHA = 1;
    private static final int COLUMNA_PROVEEDOR = 2;
    private static final int COLUMNA_NO_FACTURA = 3;
    private static final int COLUMNA_NO_PEDIDO = 4;
    private static final int COLUMNA_CALIBRE = 5;
    private static final int COLUMNA_PRESENTACION_LAMINA = 6;
    private static final int COLUMNA_NO_ROLLO = 7;
    private static final int COLUMNA_PZKG = 8;
    private static final int COLUMNA_ESTATUS = 9;
    private static final int COLUMNA_OPERACIONES = 10;

    public pnlVerReportes(Connection conexion, Usuarios usuario, InspeccionReciboServicio irs) {
        this.conexion = conexion;
        this.usuario = usuario;
        this.irs = irs;
        this.excel = new GeneradorExcel();
        inicializarPanelYComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblReporteInspeccionRecibo = new javax.swing.JLabel();
        btnAgregarCalibre = new swing.Button(new Color(255, 214, 125),new Color(255, 200, 81));
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInspeccionRecibo = new javax.swing.JTable();
        txtBuscador = new swing.TextField();
        btnToExcel = new swing.Button(new Color(107, 240, 105),new Color(75, 212, 73));
        jPanel2 = new javax.swing.JPanel();
        paginacion1 = new Paginacion.Pagination();

        setBackground(new java.awt.Color(251, 251, 251));
        setForeground(new java.awt.Color(242, 242, 242));
        setPreferredSize(new java.awt.Dimension(1190, 610));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblReporteInspeccionRecibo.setBackground(new java.awt.Color(255, 255, 255));
        lblReporteInspeccionRecibo.setFont(new java.awt.Font("Wide Latin", 1, 18)); // NOI18N
        lblReporteInspeccionRecibo.setForeground(new java.awt.Color(10, 110, 255));
        lblReporteInspeccionRecibo.setText("REPORTE DE INSPECCIÓN/RECIBO");
        add(lblReporteInspeccionRecibo, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, 660, 50));

        btnAgregarCalibre.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAgregarCalibre.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarCalibre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/1004733.png"))); // NOI18N
        btnAgregarCalibre.setText("AGREGAR CALIBRE");
        btnAgregarCalibre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarCalibreActionPerformed(evt);
            }
        });
        add(btnAgregarCalibre, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 180, -1));

        tblInspeccionRecibo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "FECHA DE FACTURA", "PROVEEDOR", "NO. FACTURA", "NO. PEDIDO", "CALIBRE", "PRESENTACIÓN DE LAMINA", "NO. ROLLO", "PZ/Kg", "ESTATUS", "OPERACIONES"
            }
        ));
        tblInspeccionRecibo.setAutoscrolls(false);
        tblInspeccionRecibo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblInspeccionRecibo.setMaximumSize(new java.awt.Dimension(400, 350));
        tblInspeccionRecibo.setMinimumSize(new java.awt.Dimension(300, 300));
        tblInspeccionRecibo.setOpaque(false);
        tblInspeccionRecibo.setPreferredSize(new java.awt.Dimension(1000, 350));
        tblInspeccionRecibo.setRowHeight(50);
        jScrollPane1.setViewportView(tblInspeccionRecibo);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 1180, 380));

        txtBuscador.setPrefixIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/find.png"))); // NOI18N
        txtBuscador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscadorKeyTyped(evt);
            }
        });
        add(txtBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 100, 260, 40));

        btnToExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/excel.png"))); // NOI18N
        btnToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToExcelActionPerformed(evt);
            }
        });
        add(btnToExcel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 20, 80, 80));

        jPanel2.setBackground(new java.awt.Color(32, 163, 211));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        paginacion1.setOpaque(false);
        jPanel2.add(paginacion1, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, -1, -1));

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 520, 1160, 50));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarCalibreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarCalibreActionPerformed
        irs.abrirAgregarCalibreHIGUI();
    }//GEN-LAST:event_btnAgregarCalibreActionPerformed

    private void txtBuscadorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscadorKeyTyped
        try {
            mostrarDatosTabla(1);
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(InspeccionReciboGUI22.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtBuscadorKeyTyped

    private void btnToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToExcelActionPerformed
        try {
            excel.generarInspeccionReciboXLSX();
        } catch (SQLException | ParseException ex) {
            Utilidades.manejarExcepcion("Error al genear el archivo InspeccionRecibo.xlsx: ", ex);
            Logger.getLogger(InspeccionReciboGUI22.class.getName()).log(Level.SEVERE, null, ex);
        } 
        JOptionPane.showMessageDialog(this, "Datos Exportados exitosamente.");
    }//GEN-LAST:event_btnToExcelActionPerformed

    private void inicializarPanelYComponentes() {
        initComponents();
        inicializarTabla(1);
        configurarPaginacion();
        configurarBuscador();
    }

    private void inicializarTabla(int pagina) {
        try {
            configurarModeloYFiltro();
            mostrarDatosTabla(pagina);
            configurarAccionesTabla();
        } catch (SQLException | ClassNotFoundException ex) {
            Utilidades.manejarExcepcion("Error al inicializar la tabla: ", ex);
            Logger.getLogger(InspeccionReciboGUI22.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void configurarModeloYFiltro() {
        this.modeloTabla = (DefaultTableModel) tblInspeccionRecibo.getModel();
        this.trs = new TableRowSorter(tblInspeccionRecibo.getModel());
        tblInspeccionRecibo.setRowSorter(trs);
    }

    private void mostrarDatosTabla(int pagina) throws SQLException, ClassNotFoundException {
        limpiarTabla();
        ajustarColumnas();
        String filtro = txtBuscador.getText();
        int limiteFilas = 7; // Cantidad de Filas por página
        int cantidad = irs.contarRegistros(conexion, filtro); // Obtener la cantidad total de registros
        int paginasTotales = (int) Math.ceil((double) cantidad / limiteFilas);

        cargarDatosTabla(pagina, limiteFilas, filtro);
        llenarTabla();
        paginacion1.setPagegination(pagina, paginasTotales);
    }

    private void limpiarTabla() {
        modeloTabla.setRowCount(0);
    }

    private void ajustarColumnas() {
        tblInspeccionRecibo.getColumnModel().getColumn(COLUMNA_NO_HOJA).setMaxWidth(70);
        tblInspeccionRecibo.getColumnModel().getColumn(COLUMNA_NO_FACTURA).setMaxWidth(80);
        tblInspeccionRecibo.getColumnModel().getColumn(COLUMNA_NO_PEDIDO).setMaxWidth(80);
        tblInspeccionRecibo.getColumnModel().getColumn(COLUMNA_CALIBRE).setMaxWidth(70);
        tblInspeccionRecibo.getColumnModel().getColumn(COLUMNA_NO_ROLLO).setMaxWidth(80);
        tblInspeccionRecibo.getColumnModel().getColumn(COLUMNA_PZKG).setMaxWidth(70);
        tblInspeccionRecibo.getColumnModel().getColumn(COLUMNA_ESTATUS).setMaxWidth(80);
    }

    private void cargarDatosTabla(int pagina, int limiteFilas, String filtro) throws SQLException {
        this.listaInspeccionRecibo = irs.obtenerTodasInspecciones(conexion, pagina, limiteFilas, filtro);
    }

    private void llenarTabla() {
        if (listaInspeccionRecibo != null && !listaInspeccionRecibo.isEmpty()) {
            listaInspeccionRecibo.forEach(inspeccionRecibo -> {
                Object[] fila = crearFila(inspeccionRecibo);
                modeloTabla.addRow(fila);
            });
        }
    }

    private Object[] crearFila(InspeccionReciboM inspeccionRecibo) {
        Object fila[] = new Object[10];
        fila[COLUMNA_NO_HOJA] = inspeccionRecibo.getNoHoja();
        fila[COLUMNA_FECHA] = inspeccionRecibo.getFechaFactura();
        fila[COLUMNA_PROVEEDOR] = inspeccionRecibo.getProveedor();
        fila[COLUMNA_NO_FACTURA] = inspeccionRecibo.getNoFactura();
        fila[COLUMNA_NO_PEDIDO] = inspeccionRecibo.getNoPedido();
        fila[COLUMNA_CALIBRE] = inspeccionRecibo.getCalibre();
        fila[COLUMNA_PRESENTACION_LAMINA] = inspeccionRecibo.getpLamina();
        fila[COLUMNA_NO_ROLLO] = inspeccionRecibo.getNoRollo();
        fila[COLUMNA_PZKG] = inspeccionRecibo.getPzKg();
        fila[COLUMNA_ESTATUS] = inspeccionRecibo.getEstatus();
        return fila;
    }

    private void configurarAccionesTabla() {
        TableActionEventIR event = crearTableActionEventIR();
        tblInspeccionRecibo.getColumnModel().getColumn(COLUMNA_OPERACIONES).setCellRenderer(new TableActionCellRenderIR(listaInspeccionRecibo));
        tblInspeccionRecibo.getColumnModel().getColumn(COLUMNA_OPERACIONES).setCellEditor(new TableActionCellEditorIR(event, listaInspeccionRecibo));
    }

    private TableActionEventIR crearTableActionEventIR() {
        return new TableActionEventIR() {
            @Override
            public void onViewFactura(int fila) {
                if (!verificarYAbrirArchivo(listaInspeccionRecibo.get(fila).getRutaFactura())) {
                    irs.abrirModificarIrGUI(listaInspeccionRecibo.get(fila), usuario);
                }
            }

            @Override
            public void onViewCertificado(int fila) {
                if (!verificarYAbrirArchivo(listaInspeccionRecibo.get(fila).getRutaCertificado())) {
                    irs.abrirModificarIrGUI(listaInspeccionRecibo.get(fila), usuario);
                }
            }

            @Override
            public void onHojaInstruccion(int fila) {
                if (!verificarYAbrirArchivo(listaInspeccionRecibo.get(fila).getRutaHojaInstruccion())) {
                    irs.abrirHojaInstruccionGUI(usuario, listaInspeccionRecibo.get(fila));
                }
            }
        };
    }

    private boolean verificarYAbrirArchivo(String rutaArchivo) {
        if (rutaArchivo != null && !rutaArchivo.isEmpty()) {
            Utilidades.abrirDocumento(rutaArchivo);
            return true;
        }
        return false;
    }
    
    private void configurarPaginacion() {
        paginacion1.addEventPagination(pagina -> inicializarTabla(pagina));
        paginacion1.setPaginationItemRender(new PaginationItemRenderStyle1());
    }

    private void configurarBuscador() {
        txtBuscador.setPrefixIcon(new ImageIcon(getClass().getResource("/icon/find.png")));
        txtBuscador.setHint("Buscar...");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarCalibre;
    private javax.swing.JButton btnToExcel;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblReporteInspeccionRecibo;
    private Paginacion.Pagination paginacion1;
    private javax.swing.JTable tblInspeccionRecibo;
    private swing.TextField txtBuscador;
    // End of variables declaration//GEN-END:variables
}
