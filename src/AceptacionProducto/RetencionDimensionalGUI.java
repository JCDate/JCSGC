package AceptacionProducto;

import Modelos.AceptacionPc1;
import Modelos.AceptacionPc2;
import Modelos.AceptacionPc3;
import Modelos.AceptacionProductoM;
import Modelos.Usuarios;
import Paginacion.estilo.PaginationItemRenderStyle1;
import Servicios.AceptacionProductoServicio;
import Servicios.Conexion;
import Servicios.GeneradorExcel;
import Servicios.Utilidades;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.sql.Connection;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

public class RetencionDimensionalGUI extends javax.swing.JFrame {

    // Atributos
    private Usuarios usuario; // Usuario autenticado en la aplicación
    private Connection conexion; // Conexión a la Base de Datos
    private AceptacionPc1 aceptacionPc1; // Objeto para el manejo de información del componente
    private AceptacionPc1 aceptacionPc1Auxiliar; // Objeto auxiliar para el manejo de información del componente
    private AceptacionPc2 aceptacionPc2; // Objeto para el manejo de información del componente
    private AceptacionPc3 nuevosDatos; // Objetos para el manejo de la nueva información ingresada
    private AceptacionProductoM aceptacionProducto; // Objeto de la clase aceptacion del producto
    private DefaultTableModel modeloTabla; // Define de la estructura de la tabla
    private GeneradorExcel excel; // Servicio para manejar archivos de excel
    private AceptacionProductoServicio aps; // Servicio para manejar la aceptación de productos
    private List<AceptacionPc3> listaNuevosDatos; // lista de nuevos datos de información de aceptacion de producto
    private List<AceptacionPc3> listaAceptacionPc3; // lista de datos de información de aceptacion de producto

    // Columnas de la tabla
    private static final int COLUMNA_FECHA = 0;
    private static final int COLUMNA_NO_OP = 1;
    private static final int COLUMNA_NO_TROQUEL = 2;
    private static final int COLUMNA_ESPECIFICACION = 3;
    private static final int COLUMNA_VARIABLE = 4;
    private static final int COLUMNA_VALOR = 5;

    public RetencionDimensionalGUI() {
        initComponents();
    }

    public RetencionDimensionalGUI(Usuarios usuario) {
        this.usuario = usuario;
        inicializarVentanaYComponentes();
    }

    public RetencionDimensionalGUI(Usuarios usuario, AceptacionPc1 aceptacionPc1) {
        this.usuario = usuario;
        this.aceptacionPc1 = aceptacionPc1;
        this.aceptacionPc2 = new AceptacionPc2();
        inicializarVentanaYComponentes();
    }

    public RetencionDimensionalGUI(Usuarios usuario, AceptacionPc1 aceptacionPc1, AceptacionPc2 aceptacionPc2) {
        try {
            this.usuario = usuario;
            this.aceptacionPc1 = aceptacionPc1;
            this.aceptacionPc2 = aceptacionPc2;
            inicializarVentanaYComponentes();
            definirValoresPredeterminados();
            this.aceptacionPc2 = aps.obtenerOrden(conexion, aceptacionPc1);
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("ERROR al obtener la Orden: ", ex);
            Logger.getLogger(RetencionDimensionalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public Image getIconImage() { // Método para cambiar el icono en la barra del titulo
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("jc/img/jc.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblJCIcono = new javax.swing.JLabel();
        lblRetencionDimensional = new javax.swing.JLabel();
        btnPlanControl = new swing.Button(new Color(255, 214, 125),new Color(255, 200, 81));
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRetencionDimensional = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        lblNoOrden = new javax.swing.JLabel();
        lblTamLote = new javax.swing.JLabel();
        lblTamMuestra = new javax.swing.JLabel();
        txtNoOrden = new swing.TextField();
        txtTamLote = new swing.TextField();
        txtTamMta = new swing.TextField();
        txtInspector = new swing.TextField();
        txtTurno = new swing.TextField();
        lblTurno = new javax.swing.JLabel();
        lblDisp = new javax.swing.JLabel();
        txtDisp = new swing.TextField();
        lblInsp = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        lblComponente = new javax.swing.JLabel();
        lblNoParte = new javax.swing.JLabel();
        txtNoParte = new swing.TextField();
        lblNoOperaciones = new javax.swing.JLabel();
        txtNoOperaciones = new swing.TextField();
        txtComponente = new swing.TextField();
        btnRegresar = new javax.swing.JButton();
        pnlPC = new javax.swing.JPanel();
        lblVariable = new javax.swing.JLabel();
        lblNoOp = new javax.swing.JLabel();
        lblValor = new javax.swing.JLabel();
        txtFecha = new swing.TextField();
        cbxVariable = new swing.ComboBoxSuggestion();
        txtValor = new swing.TextField();
        lblEspecificacion = new javax.swing.JLabel();
        cbxEspecificacionPLG = new swing.ComboBoxSuggestion();
        txtEspecificacionPLG = new swing.TextField();
        lblProcesoCritico = new javax.swing.JLabel();
        cbxProcesoCritico = new swing.JCheckBoxCustom(new Color(255,0,0));
        btnAgregarVariable = new swing.Button(new Color(255, 214, 125),new Color(255, 200, 81));
        lblFecha = new javax.swing.JLabel();
        txtNoOp = new swing.TextField();
        txtNoTroquel = new swing.TextField();
        lblNoTroquel = new javax.swing.JLabel();
        btnGuardar = new swing.Button(new Color(121, 190, 255),new Color(10, 110, 255));
        btnEliminar = new swing.Button(new Color(255, 76, 76),new Color(255, 50, 50));
        btnActualizar = new swing.Button(new Color(255, 214, 125),new Color(255, 200, 81));
        btnModificar = new swing.Button(new Color(255, 214, 125),new Color(255, 200, 81));
        btnArchivoExcel = new swing.Button(new Color(118, 223, 135),new Color(45, 220, 75));
        jPanel2 = new javax.swing.JPanel();
        paginacion1 = new Paginacion.Pagination();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(251, 251, 251));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblJCIcono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/jcLogo.png"))); // NOI18N
        jPanel1.add(lblJCIcono, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 5, -1, -1));

        lblRetencionDimensional.setFont(new java.awt.Font("Wide Latin", 1, 18)); // NOI18N
        lblRetencionDimensional.setForeground(new java.awt.Color(10, 110, 255));
        lblRetencionDimensional.setText("RETENCIÓN DIMENSIONAL");
        jPanel1.add(lblRetencionDimensional, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, -1, -1));

        btnPlanControl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPlanControl.setForeground(new java.awt.Color(255, 255, 255));
        btnPlanControl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/PDF.png"))); // NOI18N
        btnPlanControl.setText("PLAN DE CONTROL");
        btnPlanControl.setActionCommand("<html><center>Ver</center>Plan de Control</html>");
        btnPlanControl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlanControlActionPerformed(evt);
            }
        });
        jPanel1.add(btnPlanControl, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 600, 200, 40));

        tblRetencionDimensional.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FECHA", "NO. OP.", "NO. TROQUEL", "VARIABLE", "ESPECIFICACIÓN", "VALOR"
            }
        ));
        tblRetencionDimensional.setRowHeight(50);
        jScrollPane1.setViewportView(tblRetencionDimensional);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 120, 850, 430));

        jPanel3.setBackground(new java.awt.Color(32, 163, 211));
        jPanel3.setForeground(new java.awt.Color(95, 158, 180));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblNoOrden.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNoOrden.setForeground(new java.awt.Color(255, 255, 255));
        lblNoOrden.setText("NO. ORDEN:");
        jPanel3.add(lblNoOrden, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        lblTamLote.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTamLote.setForeground(new java.awt.Color(255, 255, 255));
        lblTamLote.setText("TAM. LOTE:");
        jPanel3.add(lblTamLote, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        lblTamMuestra.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTamMuestra.setForeground(new java.awt.Color(255, 255, 255));
        lblTamMuestra.setText("TAM. MTA:");
        jPanel3.add(lblTamMuestra, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));
        jPanel3.add(txtNoOrden, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 90, -1));
        jPanel3.add(txtTamLote, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 90, -1));
        jPanel3.add(txtTamMta, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 90, -1));
        jPanel3.add(txtInspector, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 80, -1));
        jPanel3.add(txtTurno, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 50, 80, -1));

        lblTurno.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTurno.setForeground(new java.awt.Color(255, 255, 255));
        lblTurno.setText("TURNO:");
        jPanel3.add(lblTurno, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, -1, -1));

        lblDisp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDisp.setForeground(new java.awt.Color(255, 255, 255));
        lblDisp.setText("DISP:");
        jPanel3.add(lblDisp, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, -1, -1));
        jPanel3.add(txtDisp, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 90, 80, -1));

        lblInsp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblInsp.setForeground(new java.awt.Color(255, 255, 255));
        lblInsp.setText("INSP:");
        jPanel3.add(lblInsp, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, -1, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 370, 140));

        jPanel4.setBackground(new java.awt.Color(32, 163, 211));
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblComponente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblComponente.setForeground(new java.awt.Color(255, 255, 255));
        lblComponente.setText("COMPONENTE:");
        jPanel4.add(lblComponente, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        lblNoParte.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNoParte.setForeground(new java.awt.Color(255, 255, 255));
        lblNoParte.setText("NO. PARTE:");
        jPanel4.add(lblNoParte, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, -1, 20));
        jPanel4.add(txtNoParte, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 20, 140, -1));

        lblNoOperaciones.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNoOperaciones.setForeground(new java.awt.Color(255, 255, 255));
        lblNoOperaciones.setText("NO. OPERACIONES:");
        jPanel4.add(lblNoOperaciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 30, 150, -1));
        jPanel4.add(txtNoOperaciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 20, 80, -1));

        txtComponente.setEnabled(false);
        jPanel4.add(txtComponente, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 140, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 1120, 70));

        btnRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/boton_regresar.png"))); // NOI18N
        btnRegresar.setContentAreaFilled(false);
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });
        jPanel1.add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 640, 150, 50));

        pnlPC.setBackground(new java.awt.Color(32, 163, 211));
        pnlPC.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblVariable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblVariable.setForeground(new java.awt.Color(255, 255, 255));
        lblVariable.setText("VARIABLE:");
        pnlPC.add(lblVariable, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        lblNoOp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNoOp.setForeground(new java.awt.Color(255, 255, 255));
        lblNoOp.setText("NO. OP:");
        pnlPC.add(lblNoOp, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));

        lblValor.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblValor.setForeground(new java.awt.Color(255, 255, 255));
        lblValor.setText("VALOR:");
        pnlPC.add(lblValor, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, -1));
        pnlPC.add(txtFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 280, -1));

        pnlPC.add(cbxVariable, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 260, 35));

        txtValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValorActionPerformed(evt);
            }
        });
        pnlPC.add(txtValor, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, 290, -1));

        lblEspecificacion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblEspecificacion.setForeground(new java.awt.Color(255, 255, 255));
        lblEspecificacion.setText("ESPECIFICACIÓN PLG:");
        pnlPC.add(lblEspecificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        pnlPC.add(cbxEspecificacionPLG, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 210, 180, 35));
        pnlPC.add(txtEspecificacionPLG, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 210, 180, 40));

        lblProcesoCritico.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProcesoCritico.setForeground(new java.awt.Color(255, 255, 255));
        lblProcesoCritico.setText("PROCESO CRÍTICO: ");
        pnlPC.add(lblProcesoCritico, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));
        pnlPC.add(cbxProcesoCritico, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 30, 30));

        btnAgregarVariable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAgregarVariable.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarVariable.setText("AGREGAR VARIABLE");
        btnAgregarVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarVariableActionPerformed(evt);
            }
        });
        pnlPC.add(btnAgregarVariable, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 160, -1));

        lblFecha.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFecha.setForeground(new java.awt.Color(255, 255, 255));
        lblFecha.setText("FECHA:");
        pnlPC.add(lblFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));
        pnlPC.add(txtNoOp, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, 280, -1));
        pnlPC.add(txtNoTroquel, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, 240, -1));

        lblNoTroquel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNoTroquel.setForeground(new java.awt.Color(255, 255, 255));
        lblNoTroquel.setText("NO. TROQUEL:");
        pnlPC.add(lblNoTroquel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        btnGuardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/Guardar.png"))); // NOI18N
        btnGuardar.setText("GUARDAR");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        pnlPC.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 300, 160, 30));

        jPanel1.add(pnlPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 370, 340));

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/Eliminar.png"))); // NOI18N
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 600, 80, 40));

        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/actualizar.png"))); // NOI18N
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        jPanel1.add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 600, 80, 40));

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/modificar.png"))); // NOI18N
        btnModificar.setToolTipText("");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel1.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 600, 80, 40));

        btnArchivoExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jc/img/excelC.png"))); // NOI18N
        btnArchivoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoExcelActionPerformed(evt);
            }
        });
        jPanel1.add(btnArchivoExcel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 600, 80, 40));

        jPanel2.setBackground(new java.awt.Color(32, 163, 211));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        paginacion1.setOpaque(false);
        jPanel2.add(paginacion1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 550, 830, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1250, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        cerrarVentana();
        aps.abrirAceptacionProductoGUI2(usuario);
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnPlanControlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlanControlActionPerformed
        String componenteCodificado = obtenerComponenteCodificado();

        if (componenteCodificado.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, Seleccione un componente válido", "Componente inválido", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String rutaPHP = "http://" + Utilidades.SERVIDOR + "/produccion/php/PlanDeControlCuadro.php?componente=" + componenteCodificado;

        try {
            aps.abrirUrlEnNavegador(rutaPHP);
        } catch (IOException | URISyntaxException ex) {
            Utilidades.manejarExcepcion("Error al abrir la URL en el navegador: ", ex);
            Logger.getLogger(RetencionDimensionalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPlanControlActionPerformed

    private void btnAgregarVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarVariableActionPerformed
        cerrarVentana();
        configurarObjetosAceptacionPc();
        aps.abrirAgregarVariableGUI(usuario, aceptacionPc1, aceptacionPc2);
    }//GEN-LAST:event_btnAgregarVariableActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        configurarObjetosAceptacionPc();
        cerrarVentana();
        JOptionPane.showMessageDialog(this, "DATOS ACTUALIZADOS");
        aps.abrirRetencionDimensionalGUI(usuario, aceptacionPc1, aceptacionPc2);
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int filaSeleccionada = tblRetencionDimensional.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una fila para eliminar.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (Utilidades.confirmarEliminacion()) {
            eliminarRegistro(listaAceptacionPc3.get(filaSeleccionada));
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        int filaSeleccionada = tblRetencionDimensional.getSelectedRow();
        if (filaSeleccionada > 0) {
            configurarObjetosAceptacionPc();
            cerrarVentana();
            aps.abrirModificarRDGUI(listaAceptacionPc3.get(filaSeleccionada), usuario, aceptacionPc1, aceptacionPc2);
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una fila, es posible que necesite guardar primero la información");
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void txtValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtValorActionPerformed
        if (agregarFilaAceptacion()) {
            guardarInformacion();
        }
    }//GEN-LAST:event_txtValorActionPerformed

    private void btnArchivoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoExcelActionPerformed
        try {
            String retencionDimensional = excel.generarArchivoRetencionDimensional(conexion, listaAceptacionPc3, aceptacionPc2);
            aceptacionProducto.setComponente(txtComponente.getText());
            aceptacionProducto.setRutaArchivo(retencionDimensional);
            aps.guardarArchivoRetencionDimensional(conexion, aceptacionProducto);
            cerrarVentana();
            aps.abrirAceptacionProductoGUI(usuario);
        } catch (IOException | SQLException | ClassNotFoundException ex) {
            Utilidades.manejarExcepcion("ERROR al generar el archivo de Retención dimensional: ", ex);
            Logger.getLogger(RetencionDimensionalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnArchivoExcelActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if (agregarFilaAceptacion()) {
            guardarInformacion();
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void inicializarVentanaYComponentes() {
        try {
            configurarVentana();
            inicializarAtributos();
            inicializarTabla(1);
            configurarPaginacion();
            inicializarComponentes();
            inicializarListeners();
            inicializarDatos();
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("ERROR al Abrir RetencionDimensionalGUI: ", ex);
            Logger.getLogger(RetencionDimensionalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void configurarVentana() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
    }

    private void inicializarTabla(int page) {
        try {
            configurarModelo();
            mostrarDatosTabla(page);
        } catch (SQLException ex) {
            Logger.getLogger(RetencionDimensionalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void inicializarAtributos() throws SQLException {
        this.excel = new GeneradorExcel();
        this.aps = new AceptacionProductoServicio();
        this.conexion = Conexion.getInstance().conectar();
        this.listaNuevosDatos = new ArrayList<>();
        this.listaAceptacionPc3 = new ArrayList<>();
        this.aceptacionProducto = new AceptacionProductoM();
    }

    private void configurarModelo() {
        this.modeloTabla = (DefaultTableModel) tblRetencionDimensional.getModel();
    }

    private void mostrarDatosTabla(int pagina) throws SQLException {
        limpiarTabla();
        int limiteFilas = 7;
        int cantidad = aps.contarRegistrosAceptacionPc3(conexion, aceptacionPc1.getComponente());
        int paginasTotales = (int) Math.ceil((double) cantidad / limiteFilas);

        cargarDatosTabla(pagina, limiteFilas);
        llenarTabla();
        paginacion1.setPagegination(pagina, paginasTotales);

    }

    private void cargarDatosTabla(int pagina, int limiteFilas) throws SQLException {
        this.listaAceptacionPc3 = aps.obtenerAceptacionPc3(conexion, aceptacionPc1.getComponente(), pagina, limiteFilas);
    }

    private void inicializarComponentes() {
        try {
            cbxVariable.removeAllItems();
            cargarDatos(aceptacionPc1.getComponente());
        } catch (SQLException ex) {
            Utilidades.manejarExcepcion("Surgio un Error al inicializar los componentes: ", ex);
            Logger.getLogger(RetencionDimensionalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarDatos(String componenteSeleccionado) throws SQLException {
        List<String> variablesPlanControl = aps.obtenerVariablesPC(conexion, componenteSeleccionado);
        List<String> variablesLista = aps.obtenerVariables(conexion);
        this.aceptacionPc1Auxiliar = aps.obtenerInfoPc1(conexion, componenteSeleccionado);
        this.listaAceptacionPc3 = aps.obtenerAceptacionPc3(conexion, componenteSeleccionado);
        configurarCampos(variablesPlanControl, variablesLista);
    }

    private void configurarPaginacion() {
        paginacion1.addEventPagination(pagina -> inicializarTabla(pagina));
        paginacion1.setPaginationItemRender(new PaginationItemRenderStyle1());
    }

    private void limpiarTabla() {
        modeloTabla.setRowCount(0);
    }

    private void llenarTabla() {
        if (listaAceptacionPc3 != null && !listaAceptacionPc3.isEmpty()) {
            listaAceptacionPc3.forEach(aceptacionPc3 -> {
                Object[] fila = crearFila(aceptacionPc3);
                modeloTabla.addRow(fila);
            });
        }
    }

    private Object[] crearFila(AceptacionPc3 aceptacionPc3) {
        Object fila[] = new Object[6];
        fila[COLUMNA_FECHA] = aceptacionPc3.getFecha();
        fila[COLUMNA_NO_OP] = aceptacionPc3.getNoOp();
        fila[COLUMNA_NO_TROQUEL] = aceptacionPc3.getNoTroquel();
        fila[COLUMNA_VARIABLE] = aceptacionPc3.getVariable();
        fila[COLUMNA_ESPECIFICACION] = aceptacionPc3.getEspecificacion();
        fila[COLUMNA_VALOR] = aceptacionPc3.getValor();
        return fila;
    }

    private void configurarCampos(List<String> variablesPlanControl, List<String> variablesLista) {
        txtNoParte.setText(aceptacionPc1Auxiliar.getNoParte());
        txtNoOperaciones.setText(aceptacionPc1Auxiliar.getNoOps());

        if (variablesPlanControl.isEmpty()) {
            deshabilitarBotonPlanControl();
            variablesLista.forEach(cbxVariable::addItem);
            txtEspecificacionPLG.setVisible(true);
        } else {
            habilitarBotonPlanControl();
            variablesPlanControl.forEach(cbxVariable::addItem);
            obtenerEspecificaciones();
            btnAgregarVariable.setVisible(false);
            txtEspecificacionPLG.setVisible(false);
        }
    }

    private void deshabilitarBotonPlanControl() {
        btnPlanControl.setEnabled(false);
        cbxEspecificacionPLG.setVisible(false);
        txtEspecificacionPLG.setVisible(true);
    }

    private void habilitarBotonPlanControl() {
        btnPlanControl.setEnabled(true);
        cbxEspecificacionPLG.setVisible(true);
        txtEspecificacionPLG.setVisible(false);
    }

    private void obtenerEspecificaciones() {
        cbxEspecificacionPLG.removeAllItems();
        Object variableSeleccionada = cbxVariable.getSelectedItem();
        if (variableSeleccionada != null) {
            String variable = variableSeleccionada.toString();
            String componente = aceptacionPc1.getComponente();
            try {
                aps.obtenerEspecificaciones(conexion, variable, componente).forEach(cbxEspecificacionPLG::addItem);
            } catch (SQLException ex) {
                Utilidades.manejarExcepcion("Surgió un error al obtener las especificaciones", ex);
                Logger.getLogger(RetencionDimensionalGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void inicializarListeners() {
        cbxVariable.addActionListener((ActionEvent ae) -> {
            obtenerEspecificaciones();
        });
    }

    private void inicializarDatos() {
        txtComponente.setText(aceptacionPc1.getComponente());
        txtFecha.setText(aceptacionPc1.getFecha());
        txtFecha.setEnabled(false);
        txtNoOrden.setText(aceptacionPc2.getNoOrden());
        txtInspector.setText("JC");
        txtTamLote.setText("400");
        txtTamMta.setText("3");
        txtDisp.setText("A");
        txtTurno.setText("1");
    }

    private void definirValoresPredeterminados() {
        txtComponente.setText(aceptacionPc1.getComponente());
        txtNoParte.setText(aceptacionPc1.getNoParte());
        txtNoOperaciones.setText(aceptacionPc1.getNoOps());
        txtNoOrden.setText(aceptacionPc2.getNoOrden());
        txtInspector.setText(aceptacionPc2.getInspector());
        txtTamLote.setText(aceptacionPc2.getTamLote());
        txtTamMta.setText(aceptacionPc2.getTamMta());
        txtTurno.setText(aceptacionPc2.getTurno());
        txtDisp.setText(aceptacionPc2.getDisp());
    }

    private void cerrarVentana() {
        RetencionDimensionalGUI.this.dispose();
        Conexion.getInstance().desconectar(conexion);
    }

    private String obtenerComponenteCodificado() {
        String componentePc = txtComponente.getText().trim();
        if (componentePc.isEmpty()) {
            return "";
        }

        try {
            return URLEncoder.encode(componentePc, "UTF-8");
        } catch (UnsupportedEncodingException ex) {
            Utilidades.manejarExcepcion("Error al codificar el componente en UTF-8: ", ex);
            Logger.getLogger(RetencionDimensionalGUI.class.getName()).log(Level.SEVERE, null, ex);
            return "";
        }
    }

    private boolean agregarFilaAceptacion() {
        if (!validarEntradas()) {
            return false;
        }

        // Aquí se agregan los datos a la tabla si las validaciones se cumplen.
        String componente = txtComponente.getText();
        String noTroquel = txtNoTroquel.getText();
        String fecha = aceptacionPc1.getFecha();
        String noOp = "if".equalsIgnoreCase(txtNoOp.getText()) ? "IF" : txtNoOp.getText();
        String variable = obtenerVariableFormateada();
        String especificacionPLG = obtenerEspecificacionPLG();
        String valor = txtValor.getText();
        int procesoCritico = cbxProcesoCritico.isSelected() ? 1 : 0;

        nuevosDatos = new AceptacionPc3(0, componente, noOp, noTroquel, fecha, variable, especificacionPLG, valor, procesoCritico);

        listaNuevosDatos.add(nuevosDatos);
        modeloTabla.addRow(new Object[]{fecha, noOp, noTroquel, variable, especificacionPLG, valor});

        return true;
    }

    private boolean validarEntradas() {
        if (!esNumeroDeOperacionValido(txtNoOp.getText())) {
            JOptionPane.showMessageDialog(this, "El número de Operación es incorrecto");
            return false;
        }

        if (!aps.esValorValido(obtenerEspecificacionPLG(), txtValor.getText())) {
            return false;
        }

        if (txtComponente.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo Componente está vacío");
            return false;
        }

        if (txtNoOperaciones.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo No. Operaciones está vacío");
            return false;
        }

        return true;
    }

    private String obtenerEspecificacionPLG() {
        return cbxEspecificacionPLG.getSelectedItem() != null ? cbxEspecificacionPLG.getSelectedItem().toString() : txtEspecificacionPLG.getText();
    }

    private String obtenerVariableFormateada() {
        return cbxProcesoCritico.isSelected() ? "C " + obtenerVariableSeleccionada() : obtenerVariableSeleccionada();
    }

    private String obtenerVariableSeleccionada() {
        return cbxVariable.getSelectedItem() != null ? cbxVariable.getSelectedItem().toString() : "";
    }

    private boolean esNumeroDeOperacionValido(String noOp) {
        Set<String> valoresPermitidos = new HashSet<>(Arrays.asList("1", "2", "3", "4", "5", "if", "IF"));
        return valoresPermitidos.contains(noOp);
    }

    private void configurarObjetosAceptacionPc() {
        configurarAceptacionPc1();
        configurarAceptacionPc2();
    }

    private void configurarAceptacionPc1() {
        aceptacionPc1.setNoParte(txtNoParte.getText());
        aceptacionPc1.setNoOps(txtNoOperaciones.getText());
    }

    private void configurarAceptacionPc2() {
        String componente = txtComponente.getText();
        String fechap = aceptacionPc1.getFecha();
        String noOrden = txtNoOrden.getText();
        String tamLote = txtTamLote.getText();
        String tamMta = txtTamMta.getText();
        String inspector = txtInspector.getText();
        String turno = txtTurno.getText();
        String disp = txtDisp.getText();
        aceptacionPc2 = new AceptacionPc2("", componente, fechap, noOrden, tamLote, tamMta, inspector, turno, disp);
    }

    private void procesarRegistros() throws IOException, ClassNotFoundException, SQLException {
        validarPrecondiciones();
        guardarOActualizarRegistroPc1(conexion, aceptacionPc1);

        if (!aps.existeRegistroPc2(conexion, aceptacionPc2)) {
            aps.agregarAceptacionPc2(conexion, aceptacionPc2);
        }

        List<AceptacionPc3> nuevosDatosFiltrados = aps.filtrarNuevosDatos(conexion, listaNuevosDatos);
        aps.agregarAceptacionPc3(conexion, nuevosDatosFiltrados);
        cerrarVentana();
        JOptionPane.showMessageDialog(this, "DATOS GUARDADOS CORRECTAMENTE");
        aps.abrirRetencionDimensionalGUI(usuario, aceptacionPc1, aceptacionPc2);
    }

    private void validarPrecondiciones() {
        if (conexion == null || aceptacionPc1 == null || aceptacionPc2 == null) {
            throw new IllegalArgumentException("Los datos de entrada no pueden ser nulos.");
        }
    }

    private void guardarOActualizarRegistroPc1(Connection conexion, AceptacionPc1 aceptacionPc1) throws SQLException {
        if (aps.existeRegistroPc1(conexion, aceptacionPc1)) {
            aps.actualizarNoOps(conexion, aceptacionPc1);
        } else {
            aps.agregarAceptacionPc1(conexion, aceptacionPc1);
        }
    }

    private void eliminarRegistro(AceptacionPc3 aceptacionPc3) {
        configurarObjetosAceptacionPc();
        if (elminarAceptacion(aceptacionPc3)) {
            JOptionPane.showMessageDialog(this, "DATOS ELIMINADOS");
            aps.abrirRetencionDimensionalGUI(usuario, aceptacionPc1, aceptacionPc2);
        }
    }

    private boolean elminarAceptacion(AceptacionPc3 aceptacionPc3) {
        try {
            aps.eliminarAceptacionPc3(conexion, aceptacionPc3);
            cerrarVentana();
            return true;
        } catch (Exception e) {
            Utilidades.manejarExcepcion("Error al eliminar el registro: ", e);
            Logger.getLogger(RetencionDimensionalGUI.class.getName()).log(Level.SEVERE, null, e);
            return false;
        }
    }

    private void guardarInformacion() {
        try {
            String noOperacion = txtNoOperaciones.getText();

            if (!esNumeroDeOperacionValido(noOperacion)) {
                JOptionPane.showMessageDialog(this, "El número de operaciones debe estar en el rango del 1 al 5", "Alerta", JOptionPane.WARNING_MESSAGE);
                return;
            }

            configurarObjetosAceptacionPc();
            procesarRegistros();
        } catch (IOException | ClassNotFoundException | SQLException ex) {
            Utilidades.manejarExcepcion("Error al Guardar la información: ", ex);
            Logger.getLogger(RetencionDimensionalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RetencionDimensionalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new RetencionDimensionalGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregarVariable;
    private javax.swing.JButton btnArchivoExcel;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnPlanControl;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JComboBox<String> cbxEspecificacionPLG;
    private javax.swing.JCheckBox cbxProcesoCritico;
    private javax.swing.JComboBox<String> cbxVariable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblComponente;
    private javax.swing.JLabel lblDisp;
    private javax.swing.JLabel lblEspecificacion;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblInsp;
    private javax.swing.JLabel lblJCIcono;
    private javax.swing.JLabel lblNoOp;
    private javax.swing.JLabel lblNoOperaciones;
    private javax.swing.JLabel lblNoOrden;
    private javax.swing.JLabel lblNoParte;
    private javax.swing.JLabel lblNoTroquel;
    private javax.swing.JLabel lblProcesoCritico;
    private javax.swing.JLabel lblRetencionDimensional;
    private javax.swing.JLabel lblTamLote;
    private javax.swing.JLabel lblTamMuestra;
    private javax.swing.JLabel lblTurno;
    private javax.swing.JLabel lblValor;
    private javax.swing.JLabel lblVariable;
    private Paginacion.Pagination paginacion1;
    private javax.swing.JPanel pnlPC;
    private javax.swing.JTable tblRetencionDimensional;
    private javax.swing.JTextField txtComponente;
    private javax.swing.JTextField txtDisp;
    private javax.swing.JTextField txtEspecificacionPLG;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtInspector;
    private javax.swing.JTextField txtNoOp;
    private javax.swing.JTextField txtNoOperaciones;
    private javax.swing.JTextField txtNoOrden;
    private javax.swing.JTextField txtNoParte;
    private javax.swing.JTextField txtNoTroquel;
    private javax.swing.JTextField txtTamLote;
    private javax.swing.JTextField txtTamMta;
    private javax.swing.JTextField txtTurno;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables
}
